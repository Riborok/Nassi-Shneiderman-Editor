unit CommandManager;

interface
uses Base, GetAction, Get—ase—onditions, AdditionalTypes, CaseBranching,
     FirstLoop, IfBranching, LastLoop, ProcessStatement, Vcl.Controls, VCL.Forms, Commands, Stack;

type
  TCommandManager = record
    FUndoStack, FRedoStack: TStack<TCommand>;
    procedure TryChangeCond(const AStatement: TStatement);
  end;

function CreateStatement(const AStatementClass: TStatementClass;
         const ABaseBlock: TBlock): TStatement;

implementation

  procedure TCommandManager.TryChangeCond(const AStatement: TStatement);
  var
    Action: String;
  begin
    Action := AStatement.Action;
    if AStatement is TCaseBranching then
    begin
      var CaseBranching: TCaseBranching:= TCaseBranching(AStatement);
      var Cond: TStringArr:= CaseBranching.Conds;
      if (WriteAction.TryGetAction(Action)) and (Write—ase—onditions.TryGetCond(Cond)) then
      begin
        FUndoStack.Push(TChangeContent.Create(AStatement, Action, Cond));
        FUndoStack.Peek.Execute;
      end;
    end
    else if WriteAction.TryGetAction(Action) then
    begin
      FUndoStack.Push(TChangeContent.Create(AStatement, Action, nil));
      FUndoStack.Peek.Execute;
    end;
  end;

  function CreateStatement(const AStatementClass: TStatementClass;
                          const ABaseBlock: TBlock): TStatement;
  var
    Action: String;
    Cond: TStringArr;
  begin
    Result:= nil;
    Action := '';

    if WriteAction.TryGetAction(Action) then
    begin

      if AStatementClass = TCaseBranching then
      begin
        Cond:= nil;
        if Write—ase—onditions.TryGetCond(Cond) then
          Result:= TCaseBranching.Create(Action, Cond, ABaseBlock);
      end
      else
        Result:= AStatementClass.Create(Action, ABaseBlock);
    end;
  end;

end.
