unit Sort;

interface
uses Types;

type
  TCompareFunction = function(const AFirstStr, ASecondStr: String): Boolean;

var
  Compare: TCompareFunction;

procedure QuickSort(var AStr: TStringArr; const AL, R: Integer);
implementation

  procedure QuickSort(var AStr: TStringArr; const AL, R: Integer);
  var
    i, j: Integer;
    Pivot, Temp: string;
  begin
    i := AL;
    j := R;
    Pivot := AStr[(AL + R) div 2];

    repeat
      while Compare(AStr[i], Pivot) do Inc(i);
      while Compare(Pivot, AStr[j]) do Dec(j);

      if i <= j then
      begin
        Temp := AStr[i];
        AStr[i] := AStr[j];
        AStr[j] := Temp;
        Inc(i);
        Dec(j);
      end;
    until i > j;

    if AL < j then QuickSort(AStr, AL, j);
    if i < R then QuickSort(AStr, i, R);
  end;

end.
