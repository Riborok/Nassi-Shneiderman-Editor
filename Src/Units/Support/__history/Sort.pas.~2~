unit Sort;

interface
uses Types;

type
  TCompareFunction = function(const AFirstStr, ASecondStr: String): Boolean;

implementation

procedure QuickSort(var A: TStringArray; const Compare: TCompareFunction; const L, R: Integer);
var
  i, j: Integer;
  Pivot, Temp: string;
begin
  i := L;
  j := R;
  Pivot := A[(L + R) div 2];

  repeat
    while Compare(A[i], Pivot) do Inc(i);
    while Compare(Pivot, A[j]) do Dec(j);

    if i <= j then
    begin
      Temp := A[i];
      A[i] := A[j];
      A[j] := Temp;
      Inc(i);
      Dec(j);
    end;
  until i > j;

  if L < j then QuickSort(A, Compare, L, j);
  if i < R then QuickSort(A, Compare, i, R);
end;

function CompareStringsAsc(const A, B: string): Boolean;
begin
  Result := CompareStr(A, B) < 0;
end;

function CompareStringsDesc(const A, B: string): Boolean;
begin
  Result := CompareStr(B, A) < 0;
end;

var
  Arr: TStringArray;
  i: Integer;
begin
  SetLength(Arr, 10);
  Arr[0] := 'dog';
  Arr[1] := 'apple';
  Arr[2] := 'cat';
  Arr[3] := 'banana';
  Arr[4] := 'zebra';
  Arr[5] := 'fish';
  Arr[6] := 'bird';
  Arr[7] := 'elephant';
  Arr[8] := 'giraffe';
  Arr[9] := 'ant';

  QuickSort(Arr, @CompareStringsAsc, Low(Arr), High(Arr));
  // или QuickSort(Arr, CompareStringsAsc, Low(Arr), High(Arr));

  for i := Low(Arr) to High(Arr) do
    WriteLn(Arr[i]);

  QuickSort(Arr, @CompareStringsDesc, Low(Arr), High(Arr));
  // или QuickSort(Arr, CompareStringsDesc, Low(Arr), High(Arr));

  for i := Low(Arr) to High(Arr) do
    WriteLn(Arr[i]);
end.


end.
