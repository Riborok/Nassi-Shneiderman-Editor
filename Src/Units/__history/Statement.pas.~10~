unit Statement;

interface

uses
  System.Generics.Collections;

type

  TBaseStatement = class abstract
  private var
    FYStart, FYLast: Integer;
    FAction: String;
  protected constructor Create(AYStart: Integer; const AAction : String);
  public property YStart: Integer read FYStart write FYStart;
  public property YLast: Integer read FYLast write FYLast;
  end;

  TBlock = class
  private const
    DefaultBlockSize = 28;
  private var
    FXStart, FXLast: Integer;
    FStatements: TList<TBaseStatement>;
  public constructor Create(AXLast, AXStart: Integer);
  public destructor Destroy; override;
  public property XStart: Integer read FXStart write FXStart;
  public property XLast: Integer read FXLast write FXLast;
  public property Statements: TList<TBaseStatement> read FStatements;
  end;


  TProcessStatement = class(TBaseStatement)
  end;

  TBaseOperator = class abstract(TBaseStatement)
  public
    //function StatementSearch(ABaseStatement: TBaseStatement): TBaseStatement; virtual; abstract;
  end;


  TIfBranching = class(TBaseOperator)
  private var
    FLeftBlock, FRightBlock: TBlock;
  public destructor Destroy; override;
  public constructor Create(AYStart, AXStart, AXLast: Integer; const AAction: string);
  end;


  TCaseBranching = class(TBaseOperator)
  private var
    FBlocks : TList<TBlock>;
  public destructor Destroy; override;
  public constructor Create(AYStart, AXStart, AXLast, AmountCase: Integer; const AAction: string);
  end;

  TFirstLoop = class(TBaseOperator)
  private const
      FAmountOfPixelCorrection = 10;
  private var
      FXCorrection: Integer;
      FBlock: TBlock;
  public destructor Destroy; override;
  public constructor Create(AYStart, AXStart, AXLast: Integer; const AAction: string); virtual;
  end;

  TLastLoop = class(TFirstLoop)
    public constructor Create(AYStart, AXStart, AXLast: Integer; const AAction: string); override;
  end;

implementation

  { TBaseStatement }

  constructor TBaseStatement.Create(AYStart: Integer; const AAction : String);
  begin
    FAction := AAction;
    FYStart := AYStart;
  end;

  { IBaseOperator }


  { TBlock }

  constructor TBlock.Create(AXLast, AXStart: Integer);
  begin
    FStatements := TList<TBaseStatement>.Create;
    FXStart := XStart;
    FXLast := XLast;
  end;

  destructor TBlock.Destroy;
  var
    I: Integer;
  begin

    for I := 0 to FStatements.Count - 1 do
      FStatements[I].Free;

    FStatements.Free;
    inherited;
  end;

  { TIfBranching }

  destructor TIfBranching.Destroy;
  begin

    FLeftBlock.Destroy;
    FRightBlock.Destroy;

    inherited;
  end;

  constructor TIfBranching.Create(AYStart, AXStart, AXLast: Integer; const AAction: string);
  begin
    inherited Create(AYStart, AAction);

    FLeftBlock:= TBlock.Create( AXStart, (AXStart + AXLast) div 2);
    FRightBlock:= TBlock.Create((AXStart + AXLast) div 2, AXLast);
  end;

  { TCaseBranching }

  destructor TCaseBranching.Destroy;
  var
    I : Integer;
  begin

    for I := 0 to FBlocks.Count - 1 do
      FBlocks[i].Destroy;

    FBlocks.Free;

    inherited;
  end;

  constructor TCaseBranching.Create(AYStart, AXStart, AXLast, AmountCase: Integer; const AAction: string);
  var
    I, BlockSize, BlockEnd: Integer;
  begin
    inherited Create(AYStart, AAction);

    FBlocks := TList<TBlock>.Create();

    BlockSize := (AXLast - AXStart) div AmountCase;

    for I := 0 to AmountCase - 2 do
    begin
      BlockEnd := AXStart + BlockSize;

      FBlocks.Add(TBlock.Create(AXStart, BlockEnd));
      AXStart := BlockEnd;
    end;
    FBlocks.Add(TBlock.Create(AXStart, AXLast));
  end;

  { TFirstLoop }

  destructor TFirstLoop.Destroy;
  begin

    FBlock.Destroy;

    inherited;
  end;

  constructor TFirstLoop.Create(AYStart, AXStart, AXLast: Integer; const AAction: string);
  begin
    inherited Create(AYStart, AAction);

    FXCorrection:= AXStart + FAmountOfPixelCorrection;
    AXStart:= FXCorrection;

    FBlock := TBlock.Create(AXStart, AXLast);
  end;

  { TLastLoop }

  constructor TLastLoop.Create(AYStart, AXStart, AXLast: Integer; const AAction: string);
  begin
    inherited Create(AYStart + TBlock.DefaultBlockSize, AXStart, AXLast, AAction);
  end;


end.
