unit DoublyLinkedList;

interface

type

  TNode<T> = class
  private
    FPrev, FNext: TNode<T>;
    FData: T;
  public
    constructor Create(AData: T);
    property Prev: TNode<T> read FPrev;
    property Next: TNode<T> read FNext;
    property Data: T read FData;
  end;

  TDoublyLinkedList<T> = class
  private
    FHead: TNode<T>;
    FTail: TNode<T>;
  public
    constructor Create(AData: T);
    destructor Destroy(); override;
    procedure AddBefore(Node: TNode<T>; AData: T);
    procedure AddAfter(Node: TNode<T>; AData: T);
    procedure Remove(Node: TNode<T>);
  end;

implementation

constructor TNode<T>.Create(AData: T);
begin
  FData := AData;
end;

constructor TDoublyLinkedList<T>.Create(AData: T);
begin
  FHead := TNode<T>.Create(AData);;
  FTail := FHead;
end;

destructor TDoublyLinkedList<T>.Destroy();
var
  Temp: TNode<T>;
begin

  Temp := FHead;

  while Temp <> nil do
  begin
    FHead := Temp.Next;
    Temp.Free;
    Temp := FHead;
  end;

  inherited;
end;

procedure TDoublyLinkedList<T>.AddBefore(Node: TNode<T>; AData: T);
var
  NewNode: TNode<T>;
begin

  NewNode := TNode<T>.Create(AData);

  NewNode.FPrev := Node.Prev;
  NewNode.FNext := Node;

  Node.FPrev := NewNode;

  if NewNode.Prev = nil then
    FHead := NewNode
  else
    NewNode.FPrev.FNext := NewNode;

end;

procedure TDoublyLinkedList<T>.AddAfter(Node: TNode<T>; AData: T);
var
  NewNode: TNode<T>;
begin

  NewNode := TNode<T>.Create(AData);
  NewNode.FNext := Node.Next;
  NewNode.FPrev := Node;

  Node.FNext := NewNode;

  if NewNode.Next = nil then
    FTail := NewNode
  else
    NewNode.FNext.FPrev := NewNode;

end;

procedure TDoublyLinkedList<T>.Remove(Node: TNode<T>);
begin

  if Node.Prev <> nil then
    Node.FPrev.FNext := Node.Next
  else
    FHead := Node.Next;

  if Node.Next <> nil then
    Node.FNext.FPrev := Node.FPrev
  else
    FTail := Node.Prev;

  Node.Free;
end;

end.
