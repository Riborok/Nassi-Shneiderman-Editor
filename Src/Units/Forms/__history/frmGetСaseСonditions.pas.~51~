unit frmGetСaseСonditions;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, uAdditionalTypes, uStack, uConstants,
  Vcl.ExtCtrls, uMinMaxInt, Vcl.DBCtrls;

type
  TWriteCaseConditions = class(TForm)
    btnOK: TButton;
    lbAdd: TLabel;
    btnAdd: TButton;
    lbDel: TLabel;
    btnDelete: TButton;
    btnCancel: TButton;
    MainPanel: TPanel;
    ScrollBar: TScrollBar;
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormCreate(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure btnDeleteClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure ScrollBarScroll(Sender: TObject; ScrollCode: TScrollCode;
      var ScrollPos: Integer);
    procedure FormMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
    procedure MainPanelClick(Sender: TObject);
  private const
    constMinAmount = 2;
    constMaxAmount = 442;

    constMemoAmount = 4;
    constMemoHigh = constMemoAmount - 1;

    constLabelCaption = 'Condition ';
  private type

    TCondSet = record
      LabelCaption : TLabel;
      Memo : TMemo;
    end;
  private
    { Private declarations }
    FPointer, FHigh: Integer;
    FConds : TStringArr;
    FCondsSet : array[0..constMemoHigh] of TCondSet;

    procedure SetCondSetVisible(const ACondSetIndex: Integer; const AVisible: Boolean);
    procedure RefreshCondSet(const AIndex: Integer);
    procedure ScrollUp;
    procedure ScrollDown;
    procedure SetScrollPos(const ANewPointer: Integer);
    procedure SaveCurrentCombination;
  public
    { Public declarations }
    function TryGetCond(var AConds: TStringArr): Boolean;
    destructor Destroy; override;
  end;

var
  WriteCaseConditions: TWriteCaseConditions;

implementation

{$R *.dfm}

  procedure TWriteCaseConditions.SetCondSetVisible(const ACondSetIndex: Integer; const AVisible: Boolean);
  begin
    FCondsSet[ACondSetIndex].LabelCaption.Visible := AVisible;
    FCondsSet[ACondSetIndex].Memo.Visible := AVisible;
  end;

  procedure TWriteCaseConditions.RefreshCondSet(const AIndex: Integer);
  begin
    FCondsSet[AIndex].Memo.Lines.Text := FConds[AIndex];
    FCondsSet[AIndex].LabelCaption.Caption := constLabelCaption + IntToStr(AIndex);
  end;

  procedure TWriteCaseConditions.SetScrollPos(const ANewPointer: Integer);
  var
    I, J: Integer;
  begin
    SaveCurrentCombination;
    FPointer := ANewPointer;

    J := Low(FCondsSet);
    for I := FPointer to FPointer + constMemoHigh do
    begin
      FCondsSet[J].Memo.Lines.Text := FConds[I];
      FCondsSet[J].LabelCaption.Caption := constLabelCaption + IntToStr(I);
      Inc(J);
    end;
  end;

  procedure TWriteCaseConditions.ScrollDown;
  var
    I: Integer;
  begin
    FConds[FPointer] := FCondsSet[Low(FCondsSet)].Memo.Lines.Text;

    Inc(FPointer);
    for I := Low(FCondsSet) to constMemoHigh - 1 do
    begin
      FCondsSet[I].Memo.Lines.Text := FCondsSet[I + 1].Memo.Lines.Text;
      FCondsSet[I].LabelCaption.Caption := constLabelCaption + IntToStr(FPointer + I);
    end;

    FCondsSet[constMemoHigh].Memo.Lines.Text := FConds[FPointer + constMemoHigh];
    FCondsSet[constMemoHigh].LabelCaption.Caption := constLabelCaption + IntToStr(FPointer + constMemoHigh);
  end;

  procedure TWriteCaseConditions.ScrollUp;
  var
    I: Integer;
  begin
    FConds[FPointer + constMemoHigh] := FCondsSet[constMemoHigh].Memo.Lines.Text;

    Dec(FPointer);
    for I := constMemoHigh downto Low(FCondsSet) + 1 do
    begin
      FCondsSet[I].Memo.Lines.Text := FCondsSet[I - 1].Memo.Lines.Text;
      FCondsSet[I].LabelCaption.Caption := constLabelCaption + IntToStr(FPointer + I);
    end;

    FCondsSet[Low(FCondsSet)].Memo.Lines.Text := FConds[FPointer];
    FCondsSet[Low(FCondsSet)].LabelCaption.Caption := constLabelCaption + IntToStr(FPointer);
  end;

  procedure TWriteCaseConditions.ScrollBarScroll(Sender: TObject;
    ScrollCode: TScrollCode; var ScrollPos: Integer);
  begin
    case ScrollCode of
      scLineUp, scPageUp:
      if FPointer <> Low(FCondsSet) then
        ScrollUp;
      scLineDown, scPageDown:
      if FPointer <> FHigh - constMemoHigh then
        ScrollDown;
      scPosition, scTrack:
        SetScrollPos(ScrollPos);
      scTop:
        SetScrollPos(Low(FCondsSet));
      scBottom:
        SetScrollPos(FHigh - constMemoHigh);
    end;
  end;

  function TWriteCaseConditions.TryGetCond(var AConds: TStringArr): Boolean;
  var
    I, MinHigh: Integer;
  begin
    FPointer:= Low(FCondsSet);
    ScrollBar.Position := FPointer;

    if AConds = nil then
    begin
      ScrollBar.Enabled := False;
      FHigh := constMinAmount - 1;

      SetLength(FConds, FHigh shl 2);

      for I := Low(FCondsSet) to FHigh do
      begin
        SetCondSetVisible(I, True);

        FCondsSet[I].Memo.Lines.Text := '';
        FCondsSet[I].LabelCaption.Caption := constLabelCaption + IntToStr(I);
      end;

      for I := FHigh + 1 to constMemoHigh do
        SetCondSetVisible(I, False);
    end
    else
    begin
      FHigh := High(AConds);

      if High(AConds) > constMemoHigh then
        ScrollBar.Enabled := True
      else
        ScrollBar.Enabled := False;

      SetLength(FConds, Length(AConds) shl 1);

      for I := 0 to High(AConds) do
        FConds[I] := AConds[I];

      MinHigh := Min(FHigh, constMemoHigh);
      for I := Low(FCondsSet) to MinHigh do
      begin
        SetCondSetVisible(I, True);
        RefreshCondSet(I);
      end;

      for I := MinHigh + 1 to constMemoHigh do
        SetCondSetVisible(I, False);
    end;

    ShowModal;

    if Self.ModalResult = MrOk then
    begin
      Result:= True;
      SetLength(AConds, FHigh + 1);

      SaveCurrentCombination;

      for I := 0 to FHigh do
        AConds[I] := FConds[I];
    end
    else
      Result:= False;

    SetLength(FConds, 0);
  end;

  procedure TWriteCaseConditions.SaveCurrentCombination;
  var
    I: Integer;
  begin
    for I := Low(FCondsSet) to constMemoHigh do
      FConds[FPointer + I] := FCondsSet[I].Memo.Lines.Text;
  end;

  procedure TWriteCaseConditions.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
  begin
    if Key = VK_ESCAPE then
      ModalResult := mrCancel
    else if (Key = VK_RETURN) and not (ssShift in Shift) then
      ModalResult := mrOk;
  end;

  procedure TWriteCaseConditions.FormMouseWheel(Sender: TObject;
    Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint;
    var Handled: Boolean);
  begin
    if ScrollBar.Enabled and BtnOk.Focused then
    begin
      if (WheelDelta > 0) and (FPointer <> Low(FCondsSet)) then
      begin
        ScrollUp;
        ScrollBar.Position := FPointer;
      end
      else if (WheelDelta < 0) and (FPointer <> FHigh - constMemoHigh) then
      begin
        ScrollDown;
        ScrollBar.Position := FPointer;
      end;
      Handled := True;
    end;
  end;

procedure TWriteCaseConditions.btnAddClick(Sender: TObject);
  begin
    BtnOk.SetFocus;
    if FHigh < constMaxAmount then
    begin
      Inc(FHigh);

      if FHigh > High(FConds) then
        SetLength(FConds, (FHigh + 1) shl 1);

      if FHigh <= constMemoHigh then
      begin
        ScrollBar.Position := 0;
        SetCondSetVisible(FHigh, True);
        RefreshCondSet(FHigh);
      end
      else
      begin
        ScrollBar.Enabled := True;
        ScrollBar.Max := FHigh - constMemoHigh;
      end;
    end;
  end;

  procedure TWriteCaseConditions.btnDeleteClick(Sender: TObject);
  begin
    BtnOk.SetFocus;
    if FHigh >= constMinAmount then
    begin
      if FHigh <= constMemoAmount then
      begin
        ScrollBar.Position := 0;
        ScrollBar.Enabled := False;

        var I: Integer;
        for I := Low(FCondsSet) to FHigh - 1 do
          RefreshCondSet(I);
        for I := FHigh to constMemoHigh do
          SetCondSetVisible(I, False);
      end
      else if FPointer + constMemoHigh = FHigh then
      begin
        ScrollUp;
        ScrollBar.Max := FHigh - constMemoAmount;
      end
      else
        ScrollBar.Max := FHigh - constMemoAmount;

      FConds[FHigh] := '';

      Dec(FHigh);
    end;
  end;

  procedure TWriteCaseConditions.FormCreate(Sender: TObject);
  const
    Indent = 5;
  var
    MemoHeight, FCondsSetWidth: Integer;
    I, CurrPosY: Integer;
  begin
    MemoHeight := (MainPanel.Height - (mmFontSize + 3) * constMemoAmount -
              constMemoAmount * Indent shl 1) div constMemoAmount - Indent shl 1;
    FCondsSetWidth:= ScrollBar.Left - Indent shl 1;

    CurrPosY:= Indent;
    for I := Low(FCondsSet) to constMemoHigh do
    begin
      FCondsSet[I].LabelCaption := TLabel.Create(Self);
      FCondsSet[I].Memo := TMemo.Create(Self);

      with FCondsSet[I].LabelCaption do
      begin
        Parent := MainPanel;
        Left := Indent;
        Width := FCondsSetWidth;
        Top := CurrPosY;
        Font.Size := mmFontSize;
        Font.Name := mmFontName;
      end;

      Inc(CurrPosY, FCondsSet[I].LabelCaption.Height + Indent);

      with FCondsSet[I].Memo do
      begin
        Parent := MainPanel;
        Left := Indent;
        Width := FCondsSetWidth;
        Top := CurrPosY;
        Height := MemoHeight;
        Font.Size := mmFontSize;
        Font.Name := mmFontName;
        MaxLength := MaxTextLength;
        ScrollBars := ssBoth;
      end;

      Inc(CurrPosY, MemoHeight + Indent);
    end;
  end;

  destructor TWriteCaseConditions.Destroy;
  var
    I: Integer;
  begin
    for I := Low(FCondsSet) to constMemoHigh do
    begin
      FCondsSet[I].LabelCaption.Destroy;
      FCondsSet[I].Memo.Destroy;
    end;
    inherited;
  end;

  procedure TWriteCaseConditions.FormShow(Sender: TObject);
  begin
    Left := (Screen.Width - Width) shr 1;
    Top := (Screen.Height - Height) shr 1;
  end;

  procedure TWriteCaseConditions.MainPanelClick(Sender: TObject);
  begin
    BtnOk.SetFocus;
  end;

end.
