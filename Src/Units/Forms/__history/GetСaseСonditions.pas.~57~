unit Get혀se혎nditions;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, AdditionalTypes, Stack, Constants,
  Vcl.ExtCtrls;

type
  TWrite혀se혎nditions = class(TForm)
    ScrollBox: TScrollBox;
    btnOK: TButton;
    lbAdd: TLabel;
    btnAdd: TButton;
    lbDel: TLabel;
    btnDelete: TButton;
    btnCancel: TButton;
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormCreate(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure ScrollBoxMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
    procedure btnDeleteClick(Sender: TObject);
    destructor Destroy;
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
    FMemoStack: TStack<TMemo>;
    FLabelStack: TStack<TLabel>;
    procedure CreateMemo(const AText: string = '');
  public
    { Public declarations }
    function TryGetCond(var ACond: TStringArr): Boolean;
  private const
    MinAmount = 2;
    MaxAmount = 142;
  end;

var
  Write혀se혎nditions: TWrite혀se혎nditions;

implementation

{$R *.dfm}
  function TWrite혀se혎nditions.TryGetCond(var ACond: TStringArr): Boolean;
  var
    I: Integer;
    Memo: TMemo;
  begin
    for I := 0 to High(ACond) do
      CreateMemo(ACond[i]);

    for I := Length(ACond) + 1 to MinAmount do
      CreateMemo;

    FMemoStack.Peek.SelStart := 0;
    FMemoStack.Peek.SelLength := Length(FMemoStack.Peek.Text);

    ShowModal;

    if ModalResult = MrOk then
    begin
      Result:= True;

      SetLength(ACond, FMemoStack.Count);

      for I := FMemoStack.Count - 1 downto 0 do
      begin
        Memo:= FMemoStack.Pop;
        ACond[I]:= Memo.Lines.Text;
        Memo.Destroy;
      end;
    end
    else
      Result:= False;

    for I:= FMemoStack.Count - 1 downto 0 do
      FMemoStack.Pop.Destroy;

    for I:= FLabelStack.Count - 1 downto 0 do
      FLabelStack.Pop.Destroy;

  end;

  destructor TWrite혀se혎nditions.Destroy;
  begin
    FMemoStack.Destroy;
    FLabelStack.Destroy;

    inherited;
  end;

  procedure TWrite혀se혎nditions.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
  begin
    if Key = VK_ESCAPE then
      ModalResult := mrCancel
    else if (Key = VK_RETURN) and not (ssShift in Shift) then
      ModalResult := mrOk;
  end;

  procedure TWrite혀se혎nditions.btnAddClick(Sender: TObject);
  begin
    if FMemoStack.Count < MaxAmount then
      CreateMemo;
  end;

  procedure TWrite혀se혎nditions.btnDeleteClick(Sender: TObject);
  begin
    if FMemoStack.Count > MinAmount then
    begin
      FMemoStack.Pop.Destroy;
      FLabelStack.Pop.Destroy;
    end;
  end;

  procedure TWrite혀se혎nditions.CreateMemo(const AText: string = '');
  const
    FontSize = 14;
    FontName = 'Times New Roman';
    MaxCondLength = 4242;
  var
    Memo: TMemo;
    LabelCaption: TLabel;
  begin
    Memo := TMemo.Create(ScrollBox);
    Memo.Parent := ScrollBox;
    Memo.ScrollBars := ssBoth;
    Memo.Text := AText;
    Memo.Align := alTop;
    Memo.Font.Size := FontSize;
    Memo.Font.Name := FontName;
    Memo.MaxLength := MaxCondLength;

    if FMemoStack.Count > 0 then
      Memo.Top := FMemoStack.Peek.Top + FMemoStack.Peek.Height
    else
      Memo.Top := 0;

    LabelCaption := TLabel.Create(ScrollBox);
    LabelCaption.Parent := ScrollBox;
    LabelCaption.Font.Size := FontSize;
    LabelCaption.Font.Name := FontName;
    LabelCaption.Caption := 'Condition ' + IntToStr(FMemoStack.Count + 1);
    LabelCaption.AlignWithMargins := True;
    LabelCaption.Margins.Top := 20;
    LabelCaption.Align := alTop;
    LabelCaption.Top := Memo.Top;

    FMemoStack.Push(Memo);
    FLabelStack.Push(LabelCaption);

    ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Range;
  end;

  procedure TWrite혀se혎nditions.FormCreate(Sender: TObject);
  begin
    FMemoStack:= TStack<TMemo>.Create;
    FLabelStack:= TStack<TLabel>.Create;
  end;

  procedure TWrite혀se혎nditions.FormShow(Sender: TObject);
  begin
    Left := (Screen.Width - Width) shr 1;
    Top := (Screen.Height - Height) shr 1;
    FMemoStack.Peek.SetFocus;
  end;

  procedure TWrite혀se혎nditions.ScrollBoxMouseWheel(Sender: TObject;
  Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint;
  var Handled: Boolean);
  const
    ScrotStep = 42;
  begin
    if WheelDelta > 0 then
      ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Position - ScrotStep
    else
      ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Position + ScrotStep;
  end;

end.
