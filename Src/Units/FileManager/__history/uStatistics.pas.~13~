unit uStatistics;

interface
uses
  System.SysUtils, Windows, uConstants, System.IOUtils;

type
  TUserInfo = record
    UserName: ShortString;
    LoginTime: TDateTime;
    LogoutTime: TDateTime;
    GetActionTime: Integer;
    GetCaseConditionsTime: Integer;
    GlobalSettingsTime: Integer;
    HelpTime: Integer;
    PenSettingTime: Integer;
    FileSaveCount: Integer;
    FileOpenCount: Integer;
  end;

const
  constMaxCount = 100;
  constStatisticsName = 'Statistics';
  constExt = '.stat';

procedure SaveStatistics(const AUserInfo: TUserInfo);
function LoadStatistics(const AFilePath: string): TUserInfo;

function FormatStatistics(const AUserInfo: TUserInfo): string;

implementation

  function CountFilesWithExtension(const AFolderPath: string): Integer;
  var
    SearchRec: TSearchRec;
    ResultCode: Integer;
  begin
    Result := 0;
    ResultCode := FindFirst(AFolderPath + '\' + constExt, faAnyFile, SearchRec);
    try
      while ResultCode = 0 do
      begin
        if (SearchRec.Name <> '.') and (SearchRec.Name <> '..') and
           (SearchRec.Attr and faDirectory = 0) then
          Inc(Result);
        ResultCode := FindNext(SearchRec);
      end;
    finally
      FindClose(SearchRec.FindHandle);
    end;
  end;

  procedure DeleteFilesWithExtension(const AFolderPath: string);
  var
    SearchRec: TSearchRec;
    ResultCode: Integer;
  begin
    ResultCode := FindFirst(AFolderPath + '\' + constExt, faAnyFile, SearchRec);
    try
      while ResultCode = 0 do
      begin
        if (SearchRec.Name <> '.') and (SearchRec.Name <> '..') and
           (SearchRec.Attr and faDirectory = 0) then
          DeleteFile(PWideChar(AFolderPath + '\' + SearchRec.Name));
        ResultCode := FindNext(SearchRec);
      end;
    finally
      FindClose(SearchRec.FindHandle);
    end;
  end;

  procedure SaveStatistics(const AUserInfo: TUserInfo);
  var
    Count: Integer;
    UserInfoFile: file of TUserInfo;
    FilePath: string;
  begin
    FilePath := IncludeTrailingPathDelimiter(ExtractFilePath(ParamStr(0))) + dirAppData;

    Count:= CountFilesWithExtension(FilePath);

    if Count >= constMaxCount then
      DeleteFilesWithExtension(FilePath);

    FilePath := TPath.Combine(FilePath, constStatisticsName +'_'+ IntToStr(Count) + constExt);

    AssignFile(UserInfoFile, FilePath);
    Rewrite(UserInfoFile);
    try
      Write(UserInfoFile, AUserInfo);
    finally
      CloseFile(UserInfoFile);
    end;
  end;

  function LoadStatistics(const AFilePath: string): TUserInfo;
  var
    UserInfoFile: file of TUserInfo;
  begin
    AssignFile(UserInfoFile, AFilePath);
    Reset(UserInfoFile);
    try
      Read(UserInfoFile, Result);
    finally
      CloseFile(UserInfoFile);
    end;
  end;

  function FormatStatistics(const AUserInfo: TUserInfo): string;
  begin
    Result := 'User Name: ' + AUserInfo.UserName + sLineBreak +
              'Login Time: ' + DateTimeToStr(AUserInfo.LoginTime) + sLineBreak +
              'Logout Time: ' + DateTimeToStr(AUserInfo.LogoutTime) + sLineBreak +
              'Get Action Time: ' + IntToStr(AUserInfo.GetActionTime) + ' seconds' + sLineBreak +
              'Get Case Conditions Time: ' + IntToStr(AUserInfo.GetCaseConditionsTime) + ' seconds' + sLineBreak +
              'Global Settings Time: ' + IntToStr(AUserInfo.GlobalSettingsTime) + ' seconds' + sLineBreak +
              'Help Time: ' + IntToStr(AUserInfo.HelpTime) + ' seconds' + sLineBreak +
              'Pen Setting Time: ' + IntToStr(AUserInfo.PenSettingTime) + ' seconds' + sLineBreak +
              'File Save Count: ' + IntToStr(AUserInfo.FileSaveCount) + sLineBreak +
              'File Open Count: ' + IntToStr(AUserInfo.FileOpenCount);
  end;


end.
