unit Block;

interface
uses
  System.Generics.Collections, BaseStatement;
type

  TBlock = class
  public const
    DefaultBlockSize = 28;
  private
    FXStart, FXLast: Integer;
    FStatements: TList<TBaseStatement>;
    function GetStatements: TEnumerator<TBaseStatement>;
  public
    constructor Create(AXStart, AXLast: Integer);
    destructor Destroy; override;
    property Statements: TEnumerator<TBaseStatement> read GetStatements;
    property XStart: Integer read FXStart write FXStart;
    property XLast: Integer read FXLast write FXLast;
  end;

implementation

  destructor TBlock.Destroy;
  var
    I: Integer;
  begin

    for I := 0 to FStatements.Count - 1 do
      FStatements[I].Free;

    FStatements.Free;
    inherited;
  end;

  constructor TBlock.Create(AXStart, AXLast: Integer);
  begin
    FStatements := TList<TBaseStatement>.Create;

    FXStart := AXStart;
    FXLast := AXLast;
  end;

  function TBlock.GetStatements: TEnumerator<TBaseStatement>;
  begin
    Result := FStatements.GetEnumerator;
  end;

end.
