unit CaseBranching;

interface
uses Base, vcl.graphics, Vcl.ExtCtrls, Types, CorrectAction,
     DrawShapes, DetermineDimensions;
type

  TCaseBranching = class(TOperator)
  private
    FCond: TStringArr;
  private
    function GetMaxHeightOfCond: Integer;
  protected
    procedure CreateBlock; override;
    procedure InitializeBlock; override;
    function GetOptimaWidth: Integer; override;
    function GetOptimalWidthForBlock(const ABlock: TBlock): Integer; override;
    function GetOptimalYLast: Integer; override;
  public
    constructor Create(const AAction : String;
        const ACond: TStringArr; const ABaseBlock: TBlock; const AImage: TImage);
    procedure Draw; override;
    function IsPreсOperator: Boolean; override;
  end;

implementation

  constructor TCaseBranching.Create(const AAction : String;
        const ACond: TStringArr; const ABaseBlock: TBlock; const AImage: TImage);
  var
    I: Integer;
  begin
    inherited Create(AAction, ABaseBlock, AImage);
    if Length(ACond) > 1 then
      FCond:= ACond;
  end;

  function TCaseBranching.GetMaxHeightOfCond: Integer;
  var
    I: Integer;
    CurrConditionHeight: Integer;
  begin
    Result:= GetTextHeight(FImage.Canvas, FCond[0]);
    for I := 1 to High(FBlocks) do
    begin
      CurrConditionHeight:= GetTextHeight(FImage.Canvas, FCond[I]);
      if CurrConditionHeight > Result then
        Result:= CurrConditionHeight;
    end;
  end;

  function TCaseBranching.GetOptimalYLast: Integer;
  begin
    Result:= FYStart + GetMaxHeightOfCond + 3 * YIndentText;
  end;

  function TCaseBranching.GetOptimaWidth: Integer;
  var
    TriangleHeight : Integer;
  begin
    TriangleHeight:= FYLast - FYStart - GetMaxHeightOfCond - 2 * YIndentText;

    Result:= (GetTextWidth(FImage.Canvas, FAction) + 2 * XMinIndentText) *
             TriangleHeight div
             (TriangleHeight - GetTextHeight(FImage.Canvas, FAction) - YIndentText);
  end;

  function TCaseBranching.GetOptimalWidthForBlock(const ABlock: TBlock): Integer;
  var
    I: Integer;
  begin
    I:= FindBlockIndex(ABlock.XStart);
    Result:= GetTextWidth(FImage.Canvas, FCond[I]) + 2 * XMinIndentText;
  end;

  procedure TCaseBranching.CreateBlock;
  var
    I, BlockSpacing: Integer;
  begin
    SetLength(FBlocks, Length(FCond));

    BlockSpacing:= (BaseBlock.XLast - BaseBlock.XStart) div Length(FBlocks);

    FBlocks[0]:= TBlock.Create(FBaseBlock.XStart,
                       FBaseBlock.XStart + BlockSpacing, Self);

    for I := 1 to High(FBlocks) - 1 do
    begin
      FBlocks[I]:= TBlock.Create(FBlocks[I-1].XLast,
                         FBlocks[I-1].XLast + BlockSpacing, Self);
    end;

    FBlocks[High(FBlocks)]:= TBlock.Create(FBlocks[High(FBlocks) - 1].XLast, FBaseBlock.XLast, Self);
  end;

  procedure TCaseBranching.InitializeBlock;
  var
    NewStatement: TStatement;
    I: Integer;
  begin
    for I := 0 to High(FBlocks) - 1 do
    begin
      NewStatement:= DefaultBlock.CreateUncertainty(FBlocks[I], FImage);
      FBlocks[I].AddLast(NewStatement, False);
    end;

    NewStatement:= DefaultBlock.CreateUncertainty(FBlocks[High(FBlocks)], FImage);
    FBlocks[High(FBlocks)].AddLast(NewStatement, True);
  end;

  function TCaseBranching.IsPreсOperator: Boolean;
  begin
    Result:= True;
  end;

  procedure TCaseBranching.Draw;
  var
    I: Integer;
    ActionWidth, ActionHeight: Integer;
    YTriangleHeight : Integer;
    LeftTriangleWidth : Integer;
    PartLeftTriangleWidth : Integer;
  begin

    YTriangleHeight:= FYLast - GetMaxHeightOfCond - 2 * YIndentText;

    // Calculate the dimensions of the action
    ActionWidth := GetTextWidth(FImage.Canvas, FAction);
    ActionHeight := GetTextHeight(FImage.Canvas, FAction);

    // Drawing the main block
    DrawRectangle(BaseBlock.XStart, BaseBlock.XLast, FYStart, FYLast, FImage);

    DrawInvertedTriangle(BaseBlock.XStart, FBlocks[High(FBlocks)].XStart,
          BaseBlock.XLast, FYStart, YTriangleHeight, FImage.Canvas);
    DrawLine(FBlocks[High(FBlocks)].XStart, FBlocks[High(FBlocks)].XStart,
             YTriangleHeight, FYLast, FImage.Canvas);

    LeftTriangleWidth:= BaseBlock.XStart;
    for I := 0 to High(FBlocks) - 1 do
      Inc(LeftTriangleWidth, FBlocks[I].XLast - FBlocks[I].XStart);

    PartLeftTriangleWidth:= LeftTriangleWidth;
    for I := 0 to High(FCond) - 1 do
    begin
      Dec(PartLeftTriangleWidth, FBlocks[I].XLast - FBlocks[I].XStart);

      DrawLine(FBlocks[I].XLast, FBlocks[I].XLast,
          YTriangleHeight - (YTriangleHeight - FYStart) * PartLeftTriangleWidth div LeftTriangleWidth,
          FYLast, FImage.Canvas);
    end;

    for I := 0 to High(FBlocks) do
      FBlocks[I].DrawBlock;
  end;

end.
