unit Base;

interface
uses Vcl.graphics, ArrayList, MinMaxInt, DetermineDimensions, System.Types,
     AdditionalTypes;
type
  TBlock = class;

  { TBaseStatement }
  // Define abstract class TStatement
  // This class is a base class for all statements and is abstract
  // UncertaintySymbol is a constant field used to represent an unknown value
  // in the statement
  TStatement = class abstract
  private const
    UncertaintySymbol = '';
  protected

    // FYStart and FYLast are used to store the Y position of the statement
    FYStart, FYLast: Integer;

    // FAction stores the text of the statement
    FAction: String;
    FActionSize: TSize;

    FYIndentText, FXMinIndentText: Integer;

    // FBaseBlock is a reference to the block that the statement belongs to
    FBaseBlock: TBlock;

    // Set the bottommost part
    procedure SetYBottom(const AYBottom: Integer); virtual;

    // Get the optimal lower part
    function GetMaxOptimalYBottom: Integer; virtual;

    // Lowers the statement on Offset
    procedure Lower(const AOffset: Integer);

    // Returns whether the current Y last is optimal
    function HasOptimalYLast: boolean;

    // Get the optimal Y last
    function GetOptimalYLast: Integer; virtual; abstract;

    // Returns the optimal block width
    function GetOptimaWidth: Integer; virtual; abstract;

    procedure RedefineStatement; virtual;

    procedure SetTextSize; virtual;
    procedure SetActionSizes;

    // These methods are abstract and will be implemented by subclasses to draw
    procedure Draw; virtual; abstract;

    procedure Initialize; virtual;
  public
    // This constructor creates an uncertainty statement
    constructor CreateUncertainty(const ABaseBlock: TBlock);

    // Create
    constructor Create(const AAction : String); virtual;

    // These properties return the text of the statement and base block
    property Action: String read FAction;
    property BaseBlock: TBlock read FBaseBlock;

    // Returnts the Y statrt coordinate
    property YStart: Integer read FYStart;
    property YLast: Integer read FYLast;

    // Returns the Y coordinate of the bottommost part
    function GetYBottom: Integer; virtual;

    // Change action
    procedure ChangeAction(const AAction: String);

    // Set the optimal Y last
    procedure SetOptimalYLast;

    function Clone: TStatement; virtual;
  end;

  { TStatementClass }
  TStatementClass = class of TStatement;

  { TBlockArr }
  TBlockArr = array of TBlock;

  { TOperator }
  TOperator = class abstract(TStatement)
  protected
    FBlocks: TBlockArr;

    procedure CreateBlock; virtual; abstract;

    procedure SetYBottom(const AYBottom: Integer); override;
    function GetMaxOptimalYBottom: Integer; override;

    function GetOptimalWidthForBlock(const ABlock: TBlock): Integer; virtual; abstract;

    function GetBlockYStart: Integer;

    procedure DrawBlocks(const AVisibleImageRect: TVisibleImageRect);

    procedure AlignBlocks;

    procedure RedefineStatement; override;

    procedure Initialize; override;

    procedure InitializeBlocks(StartIndex: Integer = 0);
  public
    constructor Create(const AAction : String); override;
    destructor Destroy; override;

    function IsPreсOperator : Boolean; virtual; abstract;

    function GetYBottom: Integer; override;

    property Blocks: TBlockArr read FBlocks;

    function Clone: TStatement; override;

    function FindBlockIndex(const AXStart: Integer): Integer;

    function GetOffsetFromXStart: Integer; virtual;
  end;

  { TBlock }
  TBlock = class
  private
    // FCanvas is a reference to the canvas used for drawing
    FCanvas: TCanvas;

    FXStart, FXLast: Integer;
    FStatements: TArrayList<TStatement>;
    FBaseOperator: TOperator;

    procedure ChangeYStatement(AIndex: Integer = 0);

    procedure MoveRightExceptXLast(const AOffset: Integer);

    function FindOptimalXLast: Integer;

    function GetLastStatement: TStatement;

    function Clone(const ABaseOperator: TOperator): TBlock;
  public
    constructor Create(const ABaseOperator: TOperator); overload;
    constructor Create(const AXStart: Integer; const ACanvas: TCanvas); overload;
    constructor Create(const ABlock: TBlock); overload;
    destructor Destroy; override;

    property XStart: Integer read FXStart;
    property XLast: Integer read FXLast;
    property Canvas: TCanvas read FCanvas;
    property BaseOperator: TOperator read FBaseOperator;
    property Statements: TArrayList<TStatement> read FStatements;

    procedure InsertStatement(const AIndex: Integer;const AInsertedStatement: TStatement);
    procedure InsertUnknownStatement(const AIndex: Integer;const AInsertedStatement: TStatement);

    procedure AddFirstStatement(const AStatement: TStatement; const AYStart: Integer); overload;
    procedure AddFirstStatement(const AStatement: TStatement); overload;

    procedure AddBlock(const AIndex: Integer; const AInsertedBlock: TBlock);

    function ExtractWithResizing(const AStatement: TStatement): Integer;
    function ExtractStatementAt(const AIndex: Integer) : TStatement;
    procedure RemoveStatementAt(const Index: Integer);

    procedure SetOptimalXLastBlock;

    procedure ChangeXStartBlock(const ANewXStart: Integer);
    procedure ChangeXLastBlock(const ANewXLast: Integer);

    procedure MoveRight(const AOffset: Integer);
    procedure MoveDown(const AOffset: Integer);

    procedure DrawBlock(const AVisibleImageRect: TVisibleImageRect);

    procedure Assign(const Source: TBlock);

    procedure RedefineSizes;

    function FindStatementIndex(const AFYStart: Integer): Integer;

    // Set the dimensions after adding and if this statement is the last one,
    // it asks the previous to set the optimal height
    procedure Install(const Index: Integer);

    // After changing the Y coordinate, need to call the procedure in order to
    // change the Y coordinates of others
    procedure FixYStatementsPosition(const Index: Integer);
  end;

  var
    DefaultStatement: TStatementClass = nil;

  { Masks }
  function GetBlockMask(const ACurrBlock: TBlock;
        const AVisibleImageRect: TVisibleImageRect): Integer; inline;

  function GetStatementMask(const ACurrStatement: TStatement;
        const AVisibleImageRect: TVisibleImageRect): Integer; inline;

implementation

  { TStatement }

  constructor TStatement.CreateUncertainty(const ABaseBlock: TBlock);
  begin
    FAction := UncertaintySymbol;
    FBaseBlock:= ABaseBlock;
  end;

  constructor TStatement.Create(const AAction : String);
  begin
    FAction := AAction;
  end;

  procedure TStatement.SetTextSize;
  const
    Stock = 5;
  begin
    SetActionSizes;
    FYIndentText:= BaseBlock.FCanvas.Font.Size + BaseBlock.FCanvas.Pen.Width + Stock;
    FXMinIndentText:= BaseBlock.FCanvas.Font.Size + BaseBlock.FCanvas.Pen.Width + Stock;
  end;

  procedure TStatement.SetActionSizes;
  begin
    FActionSize:= GetTextSize(BaseBlock.Canvas, FAction);
  end;

  procedure TStatement.RedefineStatement;
  begin
    SetTextSize;
    SetOptimalYLast;
  end;

  function TStatement.HasOptimalYLast : Boolean;
  begin
    Result:= FYLast = GetOptimalYLast;
  end;

  procedure TStatement.ChangeAction(const AAction: String);
  begin
    FAction := AAction;
    SetActionSizes;

    BaseBlock.SetOptimalXLastBlock;
    SetOptimalYLast;
    BaseBlock.FixYStatementsPosition(BaseBlock.FindStatementIndex(YStart));
  end;

  function TStatement.GetYBottom: Integer;
  begin
    Result:= FYLast;
  end;

  procedure TStatement.SetYBottom(const AYBottom: Integer);
  begin
    FYLast:= AYBottom;
  end;

  function TStatement.GetMaxOptimalYBottom: Integer;
  begin
    Result:= GetOptimalYLast;
  end;

  procedure TStatement.SetOptimalYLast;
  begin
    FYLast := GetOptimalYLast;
  end;

  procedure TStatement.Lower(const AOffset: Integer);
  begin
    Inc(FYStart, AOffset);
    Inc(FYLast, AOffset);
  end;

  procedure TStatement.Initialize;
  begin
    SetOptimalYLast;
    BaseBlock.SetOptimalXLastBlock;
  end;

  function TStatement.Clone: TStatement;
  begin
    Result:= TStatementClass(Self.ClassType).CreateUncertainty(Self.BaseBlock);

    Result.FAction:= Self.FAction;

    Result.FActionSize:= Self.FActionSize;

    Result.FYIndentText := Self.FYIndentText;
    Result.FXMinIndentText := Self.FXMinIndentText;

    Result.FYStart:= Self.FYStart;
    Result.FYLast:= Self.FYLast;
  end;

  { TBlock }

  destructor TBlock.Destroy;
  var
    I: Integer;
  begin
    for I := 0 to FStatements.Count - 1 do
      FStatements[I].Destroy;

    FStatements.Destroy;
    inherited;
  end;

  constructor TBlock.Create(const ABaseOperator: TOperator);
  begin
    FStatements := TArrayList<TStatement>.Create(7);
    FBaseOperator := ABaseOperator;
  end;

  constructor TBlock.Create(const AXStart: Integer; const ACanvas: TCanvas);
  begin
    FStatements := TArrayList<TStatement>.Create(7);
    FCanvas := ACanvas;
    FXStart := AXStart;
  end;

  constructor TBlock.Create(const ABlock: TBlock);
  begin
    FStatements := TArrayList<TStatement>.Create(7);
    Self.Assign(ABlock);
    FBaseOperator := nil;
  end;

  procedure TBlock.RedefineSizes;
  var
    I: Integer;
  begin
    for I := 0 to FStatements.Count - 1 do
      FStatements[I].RedefineStatement;

    SetOptimalXLastBlock;
  end;

  procedure TBlock.InsertStatement(const AIndex: Integer;const AInsertedStatement: TStatement);
  begin
    if AIndex = FStatements.Count then
    begin
      FStatements[FStatements.Count - 1].
            SetYBottom(FStatements[FStatements.Count - 1].GetMaxOptimalYBottom);
      AInsertedStatement.FYStart:= Statements[AIndex - 1].FYLast;
    end
    else
      AInsertedStatement.FYStart:= Statements[AIndex].GetYBottom;

    AInsertedStatement.FBaseBlock:= Self;
    AInsertedStatement.SetTextSize;
    FStatements.Insert(AInsertedStatement, AIndex);

    if (Statements[AIndex - 1].FAction = TStatement.UncertaintySymbol) and
                    (Statements[AIndex - 1].ClassType = DefaultStatement) then
    begin
      AInsertedStatement.FYStart:= Statements[AIndex - 1].FYStart;
      Self.RemoveStatementAt(AIndex - 1);
    end;
  end;

  procedure TBlock.InsertUnknownStatement(const AIndex: Integer; const AInsertedStatement: TStatement);
  begin
    InsertStatement(AIndex, AInsertedStatement);

    AInsertedStatement.Initialize;

    FixYStatementsPosition(AIndex);
  end;

  procedure TBlock.AddFirstStatement(const AStatement: TStatement; const AYStart: Integer);
  begin
    FStatements.Add(AStatement);
    AStatement.FYStart:= AYStart;
    AStatement.FBaseBlock:= Self;
    AStatement.SetTextSize;

    AStatement.Initialize;

    FixYStatementsPosition(0);
  end;

  procedure TBlock.AddFirstStatement(const AStatement: TStatement);
  begin
    FStatements.Add(AStatement);
    AStatement.FBaseBlock:= Self;
    AStatement.SetTextSize;
  end;

  procedure TBlock.AddBlock(const AIndex: Integer; const AInsertedBlock: TBlock);
  var
    Offset, I, J: Integer;
    Blocks: TBlockArr;

    procedure InstallCanvas(const ABlocks: TBlockArr);
    var
      I, J: Integer;
    begin
      for I := 0 to High(ABlocks) do
      begin
        ABlocks[I].FCanvas:= Self.FCanvas;
        for J := 0 to ABlocks[I].FStatements.Count - 1 do
          if ABlocks[I].FStatements[J] is TOperator then
            InstallCanvas(TOperator(ABlocks[I].FStatements[J]).Blocks);
      end;
    end;
  begin
    Offset:= Self.XStart - AInsertedBlock.XStart;

    for I := 0 to AInsertedBlock.FStatements.Count - 1 do
    begin
      if AInsertedBlock.FStatements[I] is TOperator then
      begin
        Blocks:= TOperator(AInsertedBlock.FStatements[I]).Blocks;
        InstallCanvas(Blocks);
        for J := 0 to High(Blocks) do
          Blocks[J].MoveRight(Offset);
        Blocks[High(Blocks)].ChangeXLastBlock(XLast);
      end;
      Self.InsertStatement(AIndex + I, AInsertedBlock.FStatements[I]);
    end;

    RedefineSizes;
    FixYStatementsPosition(AIndex - 1);
  end;

  function TBlock.ExtractWithResizing(const AStatement: TStatement): Integer;
  begin
    Result:= FindStatementIndex(AStatement.FYStart);

    ExtractStatementAt(Result);

    if Result = FStatements.Count then
      Dec(Result);

    Install(Result);
  end;

  function TBlock.ExtractStatementAt(const AIndex: Integer) : TStatement;
  begin
    Result:= FStatements[AIndex];
    FStatements.Delete(AIndex);
    if FStatements.Count = 0 then
    begin
      AddFirstStatement(DefaultStatement.CreateUncertainty(Self));
      FStatements[0].FYStart:= Result.FYStart;
    end
    else if (Result.BaseBlock.BaseOperator = nil) and (AIndex = 0) then
      FStatements[0].FYStart:= Result.FYStart;
  end;

  procedure TBlock.RemoveStatementAt(const Index: Integer);
  begin
    ExtractStatementAt(Index).Destroy;
  end;

  procedure TBlock.ChangeYStatement(AIndex: Integer = 0);
  var
    I, J: Integer;
    Blocks: TBlockArr;
  begin

    if AIndex = 0 then
    begin
      if BaseOperator <> nil then
        FStatements[AIndex].Lower(BaseOperator.GetBlockYStart - FStatements[AIndex].FYStart);

      if FStatements[AIndex] is TOperator then
      begin
        Blocks:= TOperator(FStatements[AIndex]).FBlocks;
        for J := 0 to High(Blocks) do
          Blocks[J].ChangeYStatement;
      end;

      Inc(AIndex);
    end;

    for I := AIndex to FStatements.Count - 1 do
    begin

      FStatements[I].Lower(FStatements[I - 1].GetYBottom - FStatements[I].FYStart);

      if FStatements[I] is TOperator then
      begin
        Blocks:= TOperator(FStatements[I]).FBlocks;
        for J := 0 to High(Blocks) do
          Blocks[J].ChangeYStatement;
      end;
    end;

    if (BaseOperator <> nil) and not BaseOperator.IsPreсOperator then
      BaseOperator.SetOptimalYLast;
  end;

  function TBlock.FindOptimalXLast: Integer;
  var
    I, CurrOptimalX: Integer;
    Blocks: TBlockArr;
    procedure CheckNewOptimalX(var AResult: Integer; const ACurrOptimalX: Integer); inline;
    begin
      if ACurrOptimalX > AResult then
        AResult:= ACurrOptimalX;
    end;
  begin
    Result:= -1;

    for I := 0 to FStatements.Count - 1 do
    begin

      CurrOptimalX:= FXStart + FStatements[I].GetOptimaWidth;
      CheckNewOptimalX(Result, CurrOptimalX);

      if FStatements[I] is TOperator then
      begin
        Blocks:= TOperator(FStatements[I]).FBlocks;
        CurrOptimalX:= Blocks[High(Blocks)].FindOptimalXLast;
        CheckNewOptimalX(Result, CurrOptimalX);
      end;
    end;

    if BaseOperator <> nil then
    begin
      CurrOptimalX:= FXStart + BaseOperator.GetOptimalWidthForBlock(Self);
      CheckNewOptimalX(Result, CurrOptimalX);
    end;

  end;

  procedure TBlock.MoveRightExceptXLast(const AOffset: Integer);
  var
    I, J: Integer;
    Blocks: TBlockArr;
  begin
    Inc(FXStart, AOffset);
    for I := 0 to FStatements.Count - 1 do
      if FStatements[I] is TOperator then
      begin
        Blocks:= TOperator(FStatements[I]).FBlocks;
        for J := 0 to High(Blocks) - 1 do
          Blocks[J].MoveRight(AOffset);

        Blocks[High(Blocks)].MoveRightExceptXLast(AOffset);
      end;
  end;

  procedure TBlock.MoveRight(const AOffset: Integer);
  var
    I, J: Integer;
    Blocks: TBlockArr;
  begin
    Inc(FXStart, AOffset);
    Inc(FXLast, AOffset);
    for I := 0 to FStatements.Count - 1 do
      if FStatements[I] is TOperator then
      begin
        Blocks:= TOperator(FStatements[I]).FBlocks;
        for J := 0 to High(Blocks) do
          Blocks[J].MoveRight(AOffset);
      end;
  end;

  procedure TBlock.MoveDown(const AOffset: Integer);
  var
    I, J: Integer;
    Blocks: TBlockArr;
  begin
    for I := 0 to FStatements.Count - 1 do
    begin
      FStatements[I].Lower(AOffset);
      if FStatements[I] is TOperator then
      begin
        Blocks := TOperator(FStatements[I]).Blocks;
        for J := 0 to High(Blocks) do
          Blocks[J].MoveDown(AOffset);
      end;
    end;
  end;

  procedure TBlock.ChangeXStartBlock(const ANewXStart: Integer);
  var
    I: Integer;
    Blocks: TBlockArr;
  begin
    FXStart:= ANewXStart;
    for I := 0 to FStatements.Count - 1 do
      if FStatements[I] is TOperator then
      begin
        Blocks:= TOperator(FStatements[I]).FBlocks;
        Blocks[High(Blocks)].ChangeXStartBlock(ANewXStart);
      end;
  end;

  procedure TBlock.ChangeXLastBlock(const ANewXLast: Integer);
  var
    I: Integer;
    Blocks: TBlockArr;
  begin
    FXLast:= ANewXLast;
    for I := 0 to FStatements.Count - 1 do
      if FStatements[I] is TOperator then
      begin
        Blocks:= TOperator(FStatements[I]).FBlocks;
        Blocks[High(Blocks)].ChangeXLastBlock(ANewXLast);
      end;
  end;

  procedure TBlock.SetOptimalXLastBlock;
  var
    CurrBlock: TBlock;
    NewXLast, OldXLast: Integer;
    I, Index: Integer;
    Blocks: TBlockArr;
  begin
    OldXLast:= Self.FXLast;
    CurrBlock:= Self;

    while (CurrBlock.BaseOperator <> nil) and
                    (CurrBlock.BaseOperator.BaseBlock.FXLast = OldXLast) do
      CurrBlock:= CurrBlock.BaseOperator.BaseBlock;

    NewXLast:= CurrBlock.FindOptimalXLast;

    CurrBlock.ChangeXLastBlock(NewXLast);

    if CurrBlock.FBaseOperator <> nil then
    begin
      Blocks:= CurrBlock.FBaseOperator.FBlocks;

      Index:= CurrBlock.FBaseOperator.FindBlockIndex(CurrBlock.XStart) + 1;

      for I := Index to High(Blocks) - 1 do
        Blocks[I].MoveRight(Blocks[I - 1].FXLast - Blocks[I].FXStart);

      I:= High(Blocks);
      Blocks[I].MoveRightExceptXLast(Blocks[I - 1].FXLast - Blocks[I].FXStart);
      Blocks[I].SetOptimalXLastBlock;
    end;
  end;

  function TBlock.FindStatementIndex(const AFYStart: Integer): Integer;
  var
    L, R, M: Integer;
  begin
    L := 0;
    R := FStatements.Count - 1;
    Result := -1;
    while L <= R do
    begin
      M := (L + R) shr 1;
      if FStatements[M].FYStart = AFYStart then
        Exit(M)
      else if FStatements[M].FYStart < AFYStart then
        L := M + 1
      else
        R := M - 1;
    end;
  end;

  procedure TBlock.FixYStatementsPosition(const Index: Integer);
  var
    CurrBlock: TBlock;
    CurrOperator: TOperator;
  begin

    // Shift all statements after and childrens
    ChangeYStatement(Index);

    if FStatements[Index] is TOperator then
      TOperator(FStatements[Index]).AlignBlocks;

    // Next, shift the statements in all basic blocks
    CurrBlock:= Self;
    while CurrBlock.BaseOperator <> nil do
    begin
      CurrOperator:= CurrBlock.BaseOperator;
      CurrBlock:= CurrOperator.BaseBlock;

      CurrOperator.AlignBlocks;

      CurrBlock.ChangeYStatement(CurrBlock.FindStatementIndex(CurrOperator.FYStart) + 1);
    end;
  end;

  procedure TBlock.Install(const Index: Integer);
  var
    I: Integer;
    Blocks: TBlockArr;
  begin
    FStatements[Index].SetOptimalYLast;

    if FStatements[Index] is TOperator then
    begin
      Blocks:= TOperator(FStatements[Index]).Blocks;
      Blocks[0].SetOptimalXLastBlock;
      for I := 1 to High(Blocks) - 1 do
        Blocks[I].SetOptimalXLastBlock;
    end
    else
      Self.SetOptimalXLastBlock;

    FixYStatementsPosition(Index);
  end;

  function GetStatementMask(const ACurrStatement: TStatement;
        const AVisibleImageRect: TVisibleImageRect): Integer; inline;
  begin
    Result :=
    {X--- : }
      Ord(ACurrStatement.YStart >= AVisibleImageRect.FTopLeft.Y) shl 3 or
    {-X-- : }
      Ord(ACurrStatement.YLast <= AVisibleImageRect.FBottomRight.Y) shl 2 or
    {--X- : }
      Ord(ACurrStatement.YStart <= AVisibleImageRect.FBottomRight.Y) shl 1 or
    {---X : }
      Ord(ACurrStatement.YLast >= AVisibleImageRect.FTopLeft.Y);
  end;

  procedure TBlock.DrawBlock(const AVisibleImageRect: TVisibleImageRect);
  var
    L, R, M: Integer;
    CurrStatement: TStatement;
  begin
    L := 0;
    R := FStatements.Count - 1;

    while L < R do
    begin
      M := (L + R) shr 1;
      case GetStatementMask(FStatements[M], AVisibleImageRect) of
        $0F {1111}, $03 {0011}, $07 {0111}, $0B {1011}:
          R := M;
        $09 {1001}:
          R := M - 1;
        else
          L := M + 1;
      end;
    end;

    if R >= 0 then
    begin
      if (R <> 0) and (FStatements[R - 1] is TOperator) then
        TOperator(FStatements[R - 1]).DrawBlocks(AVisibleImageRect);

      for M := R to FStatements.Count - 1 do
      begin
        CurrStatement:= FStatements[M];
        if CurrStatement is TOperator then
          TOperator(CurrStatement).DrawBlocks(AVisibleImageRect);
        case GetStatementMask(CurrStatement, AVisibleImageRect) of
          $0F {1111}, $03 {0011}, $07 {0111}, $0B {1011}:
            CurrStatement.Draw;
          else
            Break;
        end;
      end;
    end;
  end;

  function TBlock.GetLastStatement: TStatement;
  begin
    if (BaseOperator = nil) or BaseOperator.IsPreсOperator then
      Result:= FStatements.GetLast
    else
      Result:= BaseOperator;
  end;

  function TBlock.Clone(const ABaseOperator: TOperator): TBlock;
  var
    I: Integer;
    NewStatements: TStatement;
  begin
    Result:= TBlock.Create(ABaseOperator);
    Result.FCanvas:= Self.FCanvas;
    Result.FXStart:= Self.FXStart;
    Result.FXLast:= Self.FXLast;

    Result.FStatements:= TArrayList<TStatement>.Create(Self.FStatements.Count);

    for I := 0 to Self.FStatements.Count - 1 do
    begin
      NewStatements:= Self.FStatements[I].Clone;
      NewStatements.FBaseBlock:= Result;
      Result.FStatements.Add(NewStatements);
    end;
  end;

  procedure TBlock.Assign(const Source: TBlock);
  begin
    Self.FXStart:= Source.FXStart;
    Self.FXLast:= Source.FXLast;
    Self.FCanvas:= Source.FCanvas;
  end;

  { TOperator }
  constructor TOperator.Create(const AAction : String);
  begin
    inherited;
    CreateBlock;
  end;

  destructor TOperator.Destroy;
  var
    I: Integer;
  begin
    for I := 0 to High(FBlocks) do
      FBlocks[I].Destroy;
    inherited;
  end;

  function TOperator.FindBlockIndex(const AXStart: Integer): Integer;
  var
    L, R, M: Integer;
  begin
    L := 0;
    R := High(FBlocks);
    Result := -1;
    while L <= R do
    begin
      M := (L + R) shr 1;
      if FBlocks[M].FXStart = AXStart then
        Exit(M)
      else if FBlocks[M].FXStart < AXStart then
        L := M + 1
      else
        R := M - 1;
    end;
  end;

  function TOperator.GetBlockYStart: Integer;
  begin
    case IsPreсOperator of
      True: Result := FYLast;
      False: Result := FYStart;
    end;
  end;

  procedure TOperator.InitializeBlocks(StartIndex: Integer = 0);
  var
    I: Integer;
    BlockYStart: Integer;
    procedure SetCanvas(const ABlock: TBlock; const ACanvas: TCanvas); inline;
    begin
      ABlock.FCanvas := ACanvas;
      ABlock.Statements[0].SetTextSize;
    end;
    procedure SetYPos(const ABlock: TBlock; const AYStart: Integer); inline;
    begin
      ABlock.Statements[0].FYStart := AYStart;
      ABlock.Statements[0].SetOptimalYLast;
    end;
  begin
    BlockYStart:= GetBlockYStart;

    if StartIndex = 0 then
    begin
      SetCanvas(Blocks[StartIndex], Self.BaseBlock.FCanvas);
      SetYPos(Blocks[StartIndex], BlockYStart);

      Blocks[StartIndex].FXStart:= BaseBlock.FXStart + GetOffsetFromXStart;
      Blocks[StartIndex].ChangeXLastBlock(Blocks[StartIndex].FindOptimalXLast);

      Inc(StartIndex);
    end;

    for I := StartIndex to High(Blocks) - 1 do
    begin
      SetCanvas(Blocks[I], Self.BaseBlock.FCanvas);
      SetYPos(Blocks[I], BlockYStart);

      Blocks[I].FXStart:= Blocks[I - 1].FXLast;
      Blocks[I].ChangeXLastBlock(Blocks[I].FindOptimalXLast);
    end;

    if Length(Blocks) > 1 then
      Blocks[High(Blocks)].FXStart:= Blocks[High(Blocks) - 1].FXLast;

    SetCanvas(Blocks[High(Blocks)], Self.BaseBlock.FCanvas);
    SetYPos(Blocks[High(Blocks)], BlockYStart);

    Blocks[High(Blocks)].FXLast:= BaseBlock.FXLast;
    Blocks[High(Blocks)].SetOptimalXLastBlock;
  end;

  function TOperator.GetYBottom: Integer;
  begin
    case IsPreсOperator of
      True: Result:= FBlocks[0].FStatements.GetLast.GetYBottom;
      False: Result := FYLast;
    end;
  end;

  procedure TOperator.SetYBottom(const AYBottom: Integer);
  var
    I: Integer;
  begin
    case IsPreсOperator of
      True:
        for I := 0 to High(FBlocks) do
          FBlocks[I].Statements.GetLast.SetYBottom(AYBottom);
      False: FYLast := AYBottom;
    end;
  end;

  function TOperator.GetMaxOptimalYBottom: Integer;
  var
    I: Integer;
  begin
    Result := -1;
    case IsPreсOperator of
      True:
        for I := 0 to High(FBlocks) do
          Result := Max(Result, FBlocks[I].Statements.GetLast.GetMaxOptimalYBottom);
      False: Result := GetOptimalYLast;
    end;
  end;

  function GetBlockMask(const ACurrBlock: TBlock;
        const AVisibleImageRect: TVisibleImageRect): Integer; inline;
  begin
    Result :=
    {X--- : }
      Ord(ACurrBlock.XStart >= AVisibleImageRect.FTopLeft.X) shl 3 or
    {-X-- : }
      Ord(ACurrBlock.XLast <= AVisibleImageRect.FBottomRight.X) shl 2 or
    {--X- : }
      Ord(ACurrBlock.XStart <= AVisibleImageRect.FBottomRight.X) shl 1 or
    {---X : }
      Ord(ACurrBlock.XLast >= AVisibleImageRect.FTopLeft.X);
  end;

  procedure TOperator.DrawBlocks(const AVisibleImageRect: TVisibleImageRect);
  var
    L, R, M: Integer;
  begin
    L := 0;
    R := High(FBlocks);

    while L < R do
    begin
      M := (L + R) shr 1;
      case GetBlockMask(FBlocks[M], AVisibleImageRect) of
        $0F {1111}, $03 {0011}, $07 {0111}, $0B {1011}:
          R := M;
        $09 {1001}:
          R := M - 1;
        else
          L := M + 1;
      end;
    end;

    if R >= 0 then
      for M := R to High(FBlocks) do
      begin
        case GetBlockMask(FBlocks[M], AVisibleImageRect) of
          $0F {1111}, $03 {0011}, $07 {0111}, $0B {1011}:
            FBlocks[M].DrawBlock(AVisibleImageRect);
          else
            Break;
        end;
      end;
  end;

  procedure TOperator.AlignBlocks;
  var
    I, MaxYLast, CurrYLast: Integer;
  begin
    if Length(FBlocks) > 1 then
    begin
      MaxYLast := FBlocks[0].GetLastStatement.GetMaxOptimalYBottom;
      for I := 1 to High(FBlocks) do
      begin
        CurrYLast := FBlocks[I].GetLastStatement.GetMaxOptimalYBottom;;
        if MaxYLast < CurrYLast then
          MaxYLast := CurrYLast;
      end;

      for I := 0 to High(FBlocks) do
        if FBlocks[I].GetLastStatement.GetYBottom <> MaxYLast then
          FBlocks[I].GetLastStatement.SetYBottom(MaxYLast);
    end;
  end;

  procedure TOperator.Initialize;
  begin
    case IsPreсOperator of
      True:
      begin
        SetOptimalYLast;
        InitializeBlocks;
      end;
      False:
      begin
        InitializeBlocks;
        SetOptimalYLast;
      end;
    end;
  end;

  procedure TOperator.RedefineStatement;
  var
    I: Integer;
  begin
    inherited;
    for I := 0 to High(FBlocks) do
      FBlocks[I].RedefineSizes;

    AlignBlocks;
  end;

  function TOperator.Clone: TStatement;
  var
    I: Integer;
    ResultOperator: TOperator;
  begin
    Result:= inherited;
    ResultOperator:= TOperator(Result);
    SetLength(ResultOperator.FBlocks, Length(Self.Blocks));

    for I := 0 to High(Self.Blocks) do
      ResultOperator.FBlocks[I]:= Self.FBlocks[I].Clone(ResultOperator);
  end;

  function TOperator.GetOffsetFromXStart: Integer;
  begin
    Result:= 0;
  end;
end.
