unit GetСaseСonditions;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Types, Stack, Constants, CorrectAction,
  Vcl.ExtCtrls;

type
  TWriteСaseСonditions = class(TForm)
    ScrollBox: TScrollBox;
    btnOK: TButton;
    AddCondition: TLabel;
    btnAdd: TButton;
    Label1: TLabel;
    btnDelete: TButton;
    Panel: TPanel;
    constructor Create(AOwner: TComponent; const ACond: TStringArr);
    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure ScrollBoxMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
    procedure btnDeleteClick(Sender: TObject);
    destructor Destroy;
  private
    { Private declarations }
    FMemoList: TStack<TMemo>;
    FLabelList: TStack<TLabel>;
    procedure CreateMemo(const AText: string = '');
  public
    { Public declarations }
    function GetСaseСonditions: TStringArr;
  end;

var
  WriteСaseСonditions: TWriteСaseСonditions;

implementation

{$R *.dfm}

  function TWriteСaseСonditions.GetСaseСonditions: TStringArr;
  var
    I: Integer;
    Memo: TMemo;
  begin
    SetLength(Result, FMemoList.Count);

    for I := FMemoList.Count - 1 downto 0 do
    begin
      Memo:= FMemoList.Pop;
      Result[I]:= GetActionForStatements(Memo.Lines.Text);
      Memo.Destroy;
    end;
  end;

  constructor TWriteСaseСonditions.Create(AOwner: TComponent; const ACond: TStringArr);
  var
    OwnerControl: TControl;
    I: Integer;
  begin
    if Length(ACond) > 1 then
    begin
      inherited Create(AOwner);

      FMemoList:= TStack<TMemo>.Create;
      FLabelList:= TStack<TLabel>.Create;

      if OwnerControl is TControl then
      begin
        OwnerControl := TControl(AOwner);
        Left := OwnerControl.Left + (OwnerControl.Width - Width) div 2;
        Top := OwnerControl.Top + (OwnerControl.Height - Height) div 2;
      end
      else
      begin
        Left := (Screen.Width - Width) div 2;
        Top := (Screen.Height - Height) div 2;
      end;

      for I := 0 to Length(ACond) - 1 do
        CreateMemo(ACond[i]);

      FMemoList.Peek.SelStart := 0;
      FMemoList.Peek.SelLength := Length(FMemoList.Peek.Text);
    end;
  end;

  destructor TWriteСaseСonditions.Destroy;
  var
    I: Integer;
    Memo: TMemo;
    LabelCaption: TLabel;
  begin
    for I:= FMemoList.Count - 1 downto 0 do
    begin
      Memo:= FMemoList.Pop;
      Memo.Destroy;
    end;

    for I:= FLabelList.Count - 1 downto 0 do
    begin
      LabelCaption:= FLabelList.Pop;
      LabelCaption.Destroy;
    end;

    FMemoList.Destroy;
    FLabelList.Destroy;

    inherited;
  end;

  procedure TWriteСaseСonditions.btnAddClick(Sender: TObject);
  begin
    CreateMemo;
  end;

  procedure TWriteСaseСonditions.btnDeleteClick(Sender: TObject);
  var
    Memo: TMemo;
    LabelCaption: TLabel;
  begin
    if FMemoList.Count > 2 then
    begin
      Memo:= FMemoList.Pop;
      LabelCaption:= FLabelList.Pop;

      if Panel.Height - Memo.Height - LabelCaption.Height >= Self.Height - ScrollBox.Top then
        Panel.Height := Panel.Height - Memo.Height - LabelCaption.Height;

      Memo.Destroy;
      LabelCaption.Destroy;
    end;
  end;

  procedure TWriteСaseСonditions.btnOKClick(Sender: TObject);
  begin
    ModalResult := mrOk;
  end;

  procedure TWriteСaseСonditions.CreateMemo(const AText: string = '');
  var
    Memo: TMemo;
    LabelCaption: TLabel;
    Panel: TPanel;
  begin

    Memo := TMemo.Create(ScrollBox);
    Memo.Parent := ScrollBox;
    Memo.ScrollBars := ssBoth;
    Memo.Text := AText;
    Memo.Align := alTop;
    Memo.Font.Size := FontSize;
    Memo.Font.Name := FontName;

    if FMemoList.Count > 0 then
      Memo.Top := FMemoList.Peek.Top + FMemoList.Peek.Height
    else
      Memo.Top := 0;

    LabelCaption := TLabel.Create(ScrollBox);
    LabelCaption.Parent := ScrollBox;
    LabelCaption.Font.Size := FontSize;
    LabelCaption.Font.Name := FontName;
    LabelCaption.Caption := 'Condition ' + IntToStr(FMemoList.Count + 1);
    LabelCaption.Top := Memo.Top;
    LabelCaption.AlignWithMargins := True;
    LabelCaption.Margins.Top := 20;
    LabelCaption.Align := alTop;

    FMemoList.Push(Memo);
    FLabelList.Push(LabelCaption);

    ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Range;
  end;

  procedure TWriteСaseСonditions.FormCreate(Sender: TObject);
  begin
    Constraints.MinWidth := 550;
    Constraints.MinHeight := 700;
  end;

  procedure TWriteСaseСonditions.ScrollBoxMouseWheel(Sender: TObject;
  Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint;
  var Handled: Boolean);
  const
    ScrotStep = 42;
  begin
    if WheelDelta > 0 then
      ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Position - ScrotStep
    else
      ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Position + ScrotStep;
  end;

end.
