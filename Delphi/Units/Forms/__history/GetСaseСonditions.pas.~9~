unit Get혀se혎nditions;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Types, ArrayList,
  Vcl.ExtCtrls;

type
  TWrite혀se혎nditions = class(TForm)
    ScrollBox: TScrollBox;
    btnOK: TButton;
    AddCondition: TLabel;
    btnAdd: TButton;
    Label1: TLabel;
    btnDelete: TButton;
    Panel1: TPanel;
    constructor Create(AOwner: TComponent; const ACond: TArrString);
    procedure btnOKClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure btnAddClick(Sender: TObject);
    procedure ScrollBoxMouseWheel(Sender: TObject; Shift: TShiftState;
      WheelDelta: Integer; MousePos: TPoint; var Handled: Boolean);
  private const
    LabelSize = 14;
    LabelFont = 'Times New Roman';
  private
    { Private declarations }
    FMemoList: TArrayList<TMemo>;
    FLabelList: TArrayList<TLabel>;
    procedure CreateMemo(const AText: string = '');
  public
    { Public declarations }
    property MemoList: TArrayList<TMemo> read FMemoList;
  end;

var
  Write혀se혎nditions: TWrite혀se혎nditions;

implementation

{$R *.dfm}

  constructor TWrite혀se혎nditions.Create(AOwner: TComponent; const ACond: TArrString);
  var
    OwnerControl: TControl;
    I: Integer;
  begin
    if Length(ACond) > 1 then
    begin
      inherited Create(AOwner);

      FMemoList:= TArrayList<TMemo>.Create(4);
      FLabelList:= TArrayList<TLabel>.Create(4);

      if OwnerControl is TControl then
      begin
        OwnerControl := TControl(AOwner);
        Left := OwnerControl.Left + (OwnerControl.Width - Width) div 2;
        Top := OwnerControl.Top + (OwnerControl.Height - Height) div 2;
      end
      else
      begin
        Left := (Screen.Width - Width) div 2;
        Top := (Screen.Height - Height) div 2;
      end;

      for I := 0 to Length(ACond) - 1 do
        CreateMemo(ACond[i]);
    end;
  end;

  procedure TWrite혀se혎nditions.btnAddClick(Sender: TObject);
  begin
    CreateMemo;
  end;

procedure TWrite혀se혎nditions.btnOKClick(Sender: TObject);
  begin
    ModalResult := mrOk;
  end;

  procedure TWrite혀se혎nditions.CreateMemo(const AText: string = '');
  var
    Memo: TMemo;
    LabelCaption: TLabel;
    Panel: TPanel;
  begin
    {Panel := TPanel.Create(ScrollBox);
    Panel.Parent := ScrollBox;
    Panel.Top := Memo.Top;
    Panel.Height := 30;
    Panel.Align := alTop;}

    Memo := TMemo.Create(ScrollBox);
    Memo.Parent := ScrollBox;
    Memo.ScrollBars := ssBoth;
    Memo.Text := AText;
    Memo.Align := alTop;
    Memo.Font.Size := LabelSize;
    Memo.Font.Name := LabelFont;


    if FMemoList.Count > 0 then
      Memo.Top := TMemo(FMemoList[FMemoList.Count - 1]).Top +
                TMemo(FMemoList[FMemoList.Count - 1]).Height
    else
      Memo.Top := 50;

    LabelCaption := TLabel.Create(ScrollBox);
    LabelCaption.Parent := ScrollBox;
    LabelCaption.Font.Size := LabelSize;
    LabelCaption.Font.Name := LabelFont;
    LabelCaption.Caption := 'Condition ' + IntToStr(FMemoList.Count + 1);
    LabelCaption.Top := Memo.Top;
    LabelCaption.Align := alTop;

    FMemoList.Add(Memo);
    FLabelList.Add(LabelCaption);

    ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Range;
  end;

  procedure TWrite혀se혎nditions.FormCreate(Sender: TObject);
  begin
    Constraints.MinWidth := 550;
    Constraints.MinHeight := 400;
  end;

  procedure TWrite혀se혎nditions.ScrollBoxMouseWheel(Sender: TObject;
  Shift: TShiftState; WheelDelta: Integer; MousePos: TPoint;
  var Handled: Boolean);
  const
    ScrotStep = 42;
  begin
    if WheelDelta > 0 then
      ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Position - ScrotStep
    else
      ScrollBox.VertScrollBar.Position := ScrollBox.VertScrollBar.Position + ScrotStep;
  end;

end.
