unit DoublyLinkedList;

interface

type

  TNode = class
  private
    FPrev, FNext: TNode;
    FData: Integer;
  public
    constructor Create(AData: Integer);
    property Prev: TNode read FPrev;
    property Next: TNode read FNext;
    property Data: Integer read FData;
  end;

  TDoublyLinkedList = class
  private
    FHead: TNode;
    FTail: TNode;
  public
    constructor Create;
    destructor Destroy; override;
    procedure AddBefore(Node: TNode; AData: Integer);
    procedure AddAfter(Node: TNode; AData: Integer);
    procedure Remove(Node: TNode);
  end;

implementation

constructor TNode.Create(AData: Integer);
begin
  FData := AData;
end;

constructor TDoublyLinkedList.Create;
begin
  FHead := nil;
  FTail := nil;
end;

destructor TDoublyLinkedList.Destroy;
var
  Temp: TNode;
begin

  Temp := FHead;

  while Temp <> nil do
  begin
    FHead := Temp.Next;
    Temp.Free;
    Temp := FHead;
  end;

  inherited;
end;

procedure TDoublyLinkedList.AddBefore(Node: TNode; AData: Integer);
var
  NewNode: TNode;
begin

  NewNode := TNode.Create(AData);

  NewNode.FPrev := Node.Prev;

  NewNode.FNext := Node;

  Node.FPrev := NewNode;

  if NewNode.Prev = nil then
    FHead := NewNode
  else
    NewNode.FPrev.FNext := NewNode;
end;

procedure TDoublyLinkedList.AddAfter(Node: TNode; AData: Integer);
var
  NewNode: TNode;
begin
  if Node = nil then
    Exit;
  NewNode := TNode.Create(AData);
  NewNode.FNext := Node.Next;
  NewNode.FPrev := Node;
  Node.FNext := NewNode;
  if NewNode.Next = nil then
    FTail := NewNode
  else
    NewNode.FNext.FPrev := NewNode;
end;

procedure TDoublyLinkedList.Remove(Node: TNode);
begin
  if Node = nil then
    Exit;
  if Node.Prev <> nil then
    Node.FPrev.FNext := Node.Next
  else
    FHead := Node.Next;
  if Node.Next <> nil then
    Node.FNext.FPrev := Node.FPrev
  else
    FTail := Node.Prev;
  Node.Free;
end;

end.

