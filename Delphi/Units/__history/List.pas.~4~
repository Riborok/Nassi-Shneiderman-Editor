unit List;

interface
uses System.SysUtils, System.Generics.Collections,  System.Generics.Defaults;

type
  TList<T> = class(TEnumerable<T>)
  private
    FArr: array of T;
    FCount: Integer;
    FCapacity: Integer;
    procedure Grow;
    function GetItem(Index: Integer): T;
    procedure SetItem(Index: Integer; Value: T);
  protected
    function DoGetEnumerator: TEnumerator<T>; override;
  public
    constructor Create(InitialCapacity: Integer = 0);
    destructor Destroy; override;
    procedure Add(Item: T);
    procedure Insert(Index: Integer; Item: T);
    procedure Clear;
    property Items[Index: Integer]: T read GetItem write SetItem; default;
    property Count: Integer read FCount;

    type
      TEnumerator = class(TEnumerator<T>)
      private
        FList: TList<T>;
        FIndex: Integer;
        function GetCurrent: T; inline;
      protected
        function DoGetCurrent: T; override;
        function DoMoveNext: Boolean; override;
      public
        constructor Create(const AList: TList<T>);
        function MoveNext: Boolean; inline;
        property Current: T read GetCurrent;
      end;

    function GetEnumerator: TEnumerator; reintroduce; inline;
  end;

implementation

  constructor TList<T>.Create(InitialCapacity: Integer = 0);
  begin
    FCount := 0;
    FCapacity := InitialCapacity;
    SetLength(FArr, FCapacity);
  end;

  destructor TList<T>.Destroy;
  begin
    Clear;

    inherited;
  end;

  procedure TList<T>.Add(Item: T);
  begin

    if FCount = FCapacity then
      Grow;

    FArr[FCount] := Item;
    Inc(FCount);
  end;

  procedure TList<T>.Insert(Index: Integer; Item: T);
  var
    I: Integer;
  begin

    if (Index < 0) or (Index > FCount) then
      raise Exception.Create('Index out of bounds');

    if FCount = FCapacity then
      Grow;

    for I := FCount - 1 downto Index do
      FArr[I + 1] := FArr[I];

    FArr[Index] := Item;
    Inc(FCount);
  end;

  procedure TList<T>.Clear;
  begin

    SetLength(FArr, 0);

    FCount := 0;

    FCapacity := 0;
  end;

  function TList<T>.GetItem(Index: Integer): T;
  begin

    if (Index < 0) or (Index >= FCount) then
      raise Exception.Create('Index out of bounds');

    Result := FArr[Index];
  end;

  procedure TList<T>.SetItem(Index: Integer; Value: T);
  begin

    if (Index < 0) or (Index >= FCount) then
      raise Exception.Create('Index out of bounds');

    FArr[Index] := Value;
  end;

  procedure TList<T>.Grow;
  begin
    FCapacity := FCapacity * 2 + 4;
    SetLength(FArr, FCapacity);
  end;

  function TList<T>.DoGetEnumerator: TEnumerator<T>;
  begin
    Result := TEnumerator.Create(Self);
  end;

  function TList<T>.TEnumerator.GetCurrent: T;
  begin
    Result := FList[FIndex];
  end;

  function TList<T>.TEnumerator.DoGetCurrent: T;
  begin
    Result := Current;
  end;

  function TList<T>.TEnumerator.DoMoveNext: Boolean;
  begin
    Result := MoveNext;
  end;

  function TList<T>.GetEnumerator: TEnumerator;
  begin
    Result := TEnumerator.Create(Self);
  end;

end.

