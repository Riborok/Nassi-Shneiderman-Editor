unit ArrayList;

interface
uses System.SysUtils;

type
  TArrayList<T> = class
  private type
      TArray = array of T;
  private
    FArray: TArray;
    FCount: Integer;
    FCapacity: Integer;
    procedure Grow;
    function GetItem(const Index: Integer): T;
    procedure SetItem(const Index: Integer; const Value: T);
  public
    property GetArray: TArray read FArray;
    constructor Create(const InitialCapacity: Integer = 0);
    destructor Destroy; override;
    procedure Delete(const Index: Integer);
    procedure Add(const Item: T);
    procedure Insert(const Index: Integer; const Item: T);
    procedure Clear;
    property Items[const Index: Integer]: T read GetItem write SetItem; default;
    property Count: Integer read FCount;
  end;

implementation

  constructor TArrayList<T>.Create(const InitialCapacity: Integer = 0);
  begin
    FCount := 0;
    FCapacity := InitialCapacity;
    SetLength(FArray, FCapacity);
  end;

  destructor TArrayList<T>.Destroy;
  begin
    Clear;

    inherited;
  end;

  procedure TArrayList<T>.Add(const Item: T);
  begin

    if FCount = FCapacity then
      Grow;

    FArray[FCount] := Item;
    Inc(FCount);
  end;

  procedure TArrayList<T>.Delete(const Index: Integer);
  var
    I: Integer;
  begin

    if (Index < 0) or (Index >= FCount) then
      raise Exception.Create('Index out of bounds');

    for I := Index to FCount - 2 do
      FArray[I] := FArray[I + 1];

    Dec(FCount);

  end;

  procedure TArrayList<T>.Insert(const Index: Integer; const Item: T);
  var
    I: Integer;
  begin

    if (Index < 0) or (Index > FCount) then
      raise Exception.Create('Index out of bounds');

    if FCount = FCapacity then
      Grow;

    for I := FCount - 1 downto Index do
      FArray[I + 1] := FArray[I];

    FArray[Index] := Item;
    Inc(FCount);
  end;

  procedure TArrayList<T>.Clear;
  begin

    SetLength(FArray, 0);

    FCount := 0;

    FCapacity := 0;
  end;

  function TArrayList<T>.GetItem(const Index: Integer): T;
  begin

    if (Index < 0) or (Index >= FCount) then
      raise Exception.Create('Index out of bounds');

    Result := FArray[Index];
  end;

  procedure TArrayList<T>.SetItem(const Index: Integer; const Value: T);
  begin

    if (Index < 0) or (Index >= FCount) then
      raise Exception.Create('Index out of bounds');


    FArray[Index] := Value;
  end;

  procedure TArrayList<T>.Grow;
  begin
    FCapacity := FCapacity * 2 + 4;
    SetLength(FArray, FCapacity);
  end;

end.

