unit Main;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes,
  Vcl.Graphics, Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ExtCtrls, ProcessStatement,
  Base, FirstLoop, IfBranching, CaseBranching, LastLoop, StatementSearch, DrawShapes,
  Vcl.StdCtrls, Vcl.Menus, System.Actions, Vcl.ActnList, Vcl.ToolWin,
  Vcl.ComCtrls, Vcl.Buttons, System.ImageList, Vcl.ImgList, GetAction;

type
  TNassiShneiderman = class(TForm)

    Image: TImage;

    MainMenu: TMainMenu;
    mnFile: TMenuItem;
    mnNew: TMenuItem;
    mnOpen: TMenuItem;
    mnSave: TMenuItem;
    mnSaveAs: TMenuItem;
    mnExport: TMenuItem;

    OpenDialog: TOpenDialog;
    SaveDialog: TSaveDialog;
    tbSelectFigType: TToolBar;
    ilBlocks: TImageList;
    spProcess: TSpeedButton;
    SpeedButton2: TSpeedButton;
    SpeedButton3: TSpeedButton;
    SpeedButton4: TSpeedButton;
    spIfBranching: TSpeedButton;

    procedure FormCreate(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);

    procedure ClearAndRedraw;

    procedure ImageMouseDown(Sender: TObject; Button: TMouseButton;
      Shift: TShiftState; X, Y: Integer);

    procedure spIfBranchingClick(Sender: TObject);
    procedure spProcessClick(Sender: TObject);
    procedure ImageDblClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

const
  InitialIndent = 5;
  InitialFontSize = 14;
  InitialFont = 'Times New Roman';

var
  NassiShneiderman: TNassiShneiderman;
  MainBlock : TBlock;
  DedicatedStatement: TStatement;

implementation

{$R *.dfm}

  procedure TNassiShneiderman.FormCreate(Sender: TObject);
  begin
    Base.DefaultBlock:= TProcessStatement;

    Self.DoubleBuffered := true;

    Image.Canvas.Font.Size := InitialFontSize;

    Image.Canvas.Font.Name := InitialFont;

    MainBlock:= TBlock.Create(InitialIndent, 0, nil);

    MainBlock.AddStatement(TProcessStatement.CreateUncertainty(InitialIndent,
                           MainBlock, Image.Canvas));

    ClearAndRedraw;
  end;

  procedure TNassiShneiderman.FormKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
  begin

    if Key = VK_DELETE then
    begin
      if DedicatedStatement <> nil then
      begin
        DedicatedStatement.BaseBlock.DeleteStatement(DedicatedStatement);
        DedicatedStatement:= nil;
      end;

      ClearAndRedraw;
    end;
  end;

  procedure TNassiShneiderman.ClearAndRedraw;
  begin
    Clear(Image.Canvas);

    if DedicatedStatement <> nil then
      DrawYellowRect(Image.Canvas, DedicatedStatement.BaseBlock.XStart, DedicatedStatement.BaseBlock.XLast,
                      DedicatedStatement.YStart, DedicatedStatement.GetYBottom);

    MainBlock.DrawBlock;
    //DrawCoordinates(Canv.Canvas, 50);
  end;

  procedure TNassiShneiderman.ImageDblClick(Sender: TObject);
  var
    MousePos: TPoint;
    writeActionForm: TWriteAction;
    Statement: TStatement;
  begin
    MousePos := Image.ScreenToClient(Mouse.CursorPos);

    Statement := BinarySearchStatement(MousePos.X, MousePos.Y, MainBlock);

    writeActionForm := TWriteAction.Create(Self, Statement.Action);
    writeActionForm.ShowModal;

    Statement.ChangeAction(writeActionForm.MemoAction.Lines.Text);

    writeActionForm.Free;
    ClearAndRedraw;
  end;

  procedure TNassiShneiderman.ImageMouseDown(Sender: TObject;
  Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  begin
    DedicatedStatement := BinarySearchStatement(X, Y, MainBlock);

    ClearAndRedraw;
  end;

  procedure TNassiShneiderman.spIfBranchingClick(Sender: TObject);
  var
    writeActionForm: TWriteAction;
  begin

    if DedicatedStatement <> nil then
    begin
      writeActionForm := TWriteAction.Create(Self);
      writeActionForm.ShowModal;
      DedicatedStatement.BaseBlock.AddAfter(DedicatedStatement, TIfBranching,
                                      writeActionForm.MemoAction.Lines.Text);
      writeActionForm.Free;
    end;

    ClearAndRedraw;
  end;

  procedure TNassiShneiderman.spProcessClick(Sender: TObject);
  var
    writeActionForm: TWriteAction;
  begin

    if DedicatedStatement <> nil then
    begin
      writeActionForm := TWriteAction.Create(Self);
      writeActionForm.ShowModal;
      DedicatedStatement.BaseBlock.AddAfter(DedicatedStatement, TProcessStatement,
                                      writeActionForm.MemoAction.Lines.Text);
      writeActionForm.Free;
    end;

    ClearAndRedraw;
  end;

end.
