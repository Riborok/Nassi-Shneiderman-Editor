unit Sort;

interface
uses Types;

type
  TCompareFunction = function(const AFirstStr, ASecondStr: String): Boolean;

var
  Compare: TCompareFunction;

procedure QuickSort(var AStr: TStringArr; const AL, AR: Integer);
implementation

  procedure QuickSort(var AStr: TStringArr; const AL, AR: Integer);
  var
    I, J: Integer;
    Pivot, Temp: string;
  begin
    I := AL;
    J := AR;
    Pivot := AStr[(AL + AR) div 2];

    repeat
      while Compare(AStr[I], Pivot) do
        Inc(I);

      while Compare(Pivot, AStr[J]) do
        Dec(J);

      if I <= J then
      begin
        Temp := AStr[i];
        AStr[I] := AStr[j];
        AStr[J] := Temp;
        Inc(I);
        Dec(J);
      end;
    until I > J;

    if AL < J then
      QuickSort(AStr, AL, j);

    if I < AR then
      QuickSort(AStr, i, AR);
  end;

  function CompareStringsAsc(const AFirstStr, B: string): Boolean;
  begin
    Result := CompareStr(AFirstStr, B) < 0;
  end;

  function CompareStringsDesc(const A, B: string): Boolean;
  begin
    Result := CompareStr(B, A) < 0;
  end;

end.
