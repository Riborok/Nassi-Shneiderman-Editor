unit uBlockManager;

interface
uses
  uBase, uCommands, uAutoClearStack, Vcl.ExtCtrls, uSwitchStatements,
  Winapi.Windows, uAdditionalTypes, uDrawShapes, Vcl.Graphics;
type

  TBlockManager = class
  public type
    TSetScrollPosProc = procedure(const AStatement: TStatement) of object;
  private const
    SchemeInitialIndent = 10;
  private
    FMainBlock : TBlock;
    FDedicatedStatement: TStatement;
    FCarryBlock: TBlock;
    FBufferBlock: TBlock;
    FUndoStack, FRedoStack: TAutoClearStack<ICommand>;
    FPaintBox: TPaintBox;
    FHighlightColor: TColor;

    procedure ChangeDedicated(const AStatement: TStatement);
  public
    constructor Create(const APaintBox: TPaintBox; const AHighlightColor: TColor);
    destructor Destroy;
    property MainBlock: TBlock read FMainBlock;
    property CarryBlock: TBlock read FCarryBlock;
    property BufferBlock: TBlock read FBufferBlock;
    property UndoStack: TAutoClearStack<ICommand> read FUndoStack;
    property RedoStack: TAutoClearStack<ICommand> read FRedoStack;

    property DedicatedStatement: TStatement read FDedicatedStatement write ChangeDedicated;

    property HighlightColor: TColor write FHighlightColor;

    procedure TryMoveDedicated(const ASetScrollPosProc: TSetScrollPosProc; const AKey: Integer);
    procedure Draw(const AVisibleImageRect: TVisibleImageRect);
    procedure CreateCarryBlock;
    procedure MoveCarryBlock(const ADeltaX, DeltaY: Integer);
  end;

implementation

  destructor TBlockManager.Destroy;
  begin
    FMainBlock.Destroy;
    FBufferBlock.Destroy;

    FUndoStack.Destroy;
    FRedoStack.Destroy;

    inherited;
  end;

  constructor TBlockManager.Create(const APaintBox: TPaintBox; const AHighlightColor: TColor);
  begin
    FPaintBox:= APaintBox;
    FHighlightColor:= AHighlightColor;

    FUndoStack := TAutoClearStack<ICommand>.Create;
    FRedoStack := TAutoClearStack<ICommand>.Create;

    FDedicatedStatement:= nil;
    FCarryBlock:= nil;

    FBufferBlock:= TBlock.Create(0, FPaintBox.Canvas);
    FBufferBlock.AddStatement(uBase.DefaultStatement.CreateUncertainty(FBufferBlock));

    FMainBlock:= TBlock.Create(SchemeInitialIndent, FPaintBox.Canvas);
    FMainBlock.AddUnknownStatement(uBase.DefaultStatement.CreateUncertainty(FMainBlock),
                                                            SchemeInitialIndent);
  end;

  procedure TBlockManager.TryMoveDedicated(const ASetScrollPosProc: TSetScrollPosProc; const AKey: Integer);
  begin
    case AKey of
      VK_LEFT:
      begin
        SetHorizontalMovement(FDedicatedStatement, FMainBlock, uSwitchStatements.BackwardDir);
        ASetScrollPosProc(FDedicatedStatement);
        FPaintBox.Invalidate;
      end;
      VK_RIGHT:
      begin
        SetHorizontalMovement(FDedicatedStatement, FMainBlock, uSwitchStatements.ForwardDir);
        ASetScrollPosProc(FDedicatedStatement);
        FPaintBox.Invalidate;
      end;
      VK_UP:
      begin
        SetVerticalMovement(FDedicatedStatement, FMainBlock, uSwitchStatements.BackwardDir);
        ASetScrollPosProc(FDedicatedStatement);
        FPaintBox.Invalidate;
      end;
      VK_DOWN:
      begin
        SetVerticalMovement(FDedicatedStatement, FMainBlock, uSwitchStatements.ForwardDir);
        ASetScrollPosProc(FDedicatedStatement);
        FPaintBox.Invalidate;
      end;
    end;
  end;

  procedure TBlockManager.Draw(const AVisibleImageRect: TVisibleImageRect);
  const
    Stock = 420;
  begin
    AVisibleImageRect.Expand(Stock);
    FPaintBox.Width := FMainBlock.XLast + Stock;
    FPaintBox.Height := FMainBlock.Statements.GetLast.GetYBottom + Stock;

    if FDedicatedStatement <> nil then
      ColorizeRect(FPaintBox.Canvas, FDedicatedStatement.BaseBlock.XStart,
                   FDedicatedStatement.BaseBlock.XLast,
                   FDedicatedStatement.YStart,
                   FDedicatedStatement.GetYBottom,
                   FHighlightColor);

    if FCarryBlock <> nil then
      FCarryBlock.DrawBlock(AVisibleImageRect);

    FMainBlock.DrawBlock(AVisibleImageRect);
    //DrawCoordinates(FPaintBox.Canvas, 50);
  end;

  procedure TBlockManager.ChangeDedicated(const AStatement: TStatement);
  begin
    FDedicatedStatement:= AStatement;
    FPaintBox.Invalidate;
  end;

  procedure TBlockManager.CreateCarryBlock;
  begin
    FCarryBlock:= TBlock.Create(nil);
    FCarryBlock.Assign(FDedicatedStatement.BaseBlock);

    FCarryBlock.AddStatement(FDedicatedStatement.Clone);
  end;

  procedure TBlockManager.MoveCarryBlock(const ADeltaX, DeltaY: Integer);
  begin
    FCarryBlock.MoveRight(ADeltaX);
    FCarryBlock.MoveDown(DeltaY);
  end;

end.
