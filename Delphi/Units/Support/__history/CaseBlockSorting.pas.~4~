unit CaseBlockSorting;

interface
uses Types, Stack, Base;

type
  TCompareFunction = function(const AFirstStr, ASecondStr: String): Boolean;

var
  Compare: TCompareFunction;

procedure QuickSort(var AStr: TStringArr; var ABlocks : TBlockArr; const AL, AR: Integer);

function CompareStrAsc(const AFirstStr, ASecondStr: string): Boolean;
function CompareStrDesc(const AFirstStr, ASecondStr: string): Boolean;
implementation

  procedure QuickSort(var AStr: TStringArr; var ABlocks : TBlockArr; const AL, AR: Integer);
  type
    TIndexRange = record
      LeftIndex: Integer;
      RightIndex: Integer;
    end;
  var
    I, J: Integer;
    Pivot, TempStr: string;
    TempBlock: TBlock;
    Stack: TStack<TIndexRange>;
    IndexRange: TIndexRange;
  begin
    Stack := TStack<TIndexRange>.Create;

    IndexRange.LeftIndex := AL;
    IndexRange.RightIndex := AR;
    Stack.Push(IndexRange);

    while Stack.Count > 0 do
    begin
      IndexRange := Stack.Pop;

      Pivot := AStr[(IndexRange.LeftIndex + IndexRange.RightIndex) div 2];

      I := IndexRange.LeftIndex;
      J := IndexRange.RightIndex;

      repeat
        while Compare(AStr[I], Pivot) do
          Inc(I);

        while Compare(Pivot, AStr[J]) do
          Dec(J);

        if I <= J then
        begin
          TempStr := AStr[I];
          AStr[I] := AStr[J];
          AStr[J] := TempStr;

          TempBlock:= ABlocks[I];
          ABlocks[I]:= ABlocks[J];
          ABlocks[J]:= TempBlock;

          Inc(I);
          Dec(J);
        end;
      until I > J;

      if IndexRange.LeftIndex < J then
      begin
        IndexRange.RightIndex := J;
        IndexRange.LeftIndex := IndexRange.LeftIndex;
        Stack.Push(IndexRange);
      end;

      if IndexRange.RightIndex > I then
      begin
        IndexRange.LeftIndex := I;
        IndexRange.RightIndex := IndexRange.RightIndex;
        Stack.Push(IndexRange);
      end;
    end;

    Stack.Destroy;
  end;

  function CompareStrAsc(const AFirstStr, ASecondStr: string): Boolean;
  begin
    Result := AFirstStr < ASecondStr;
  end;

  function CompareStrDesc(const AFirstStr, ASecondStr: string): Boolean;
  begin
    Result := AFirstStr > ASecondStr;
  end;

  initialization
  Compare:= CompareStrAsc;
end.
