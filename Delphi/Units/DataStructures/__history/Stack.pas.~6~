unit Stack;

interface
uses System.SysUtils;

type
  TStack<T> = class
  private type
    PItem = ^TItem;
    TItem = record
      Data: T;
      Next: PItem;
    end;
  private
    FTop: PItem;
    FCount: Integer;
  public
    constructor Create;
    destructor Destroy; override;
    procedure Push(const AItem: T);
    function Pop: T;
    function Peek: T;
    function Count: Integer;
  end;

implementation

{ TGenericStack<T> }

constructor TStack<T>.Create;
begin
  FTop := nil;
  FCount := 0;
end;

destructor TStack<T>.Destroy;
begin

  while FTop <> nil do
    Pop;

  inherited;
end;

procedure TStack<T>.Push(const AItem: T);
var
  NewElement: PItem;
begin

  New(NewElement);

  NewElement^.Data := AItem;
  NewElement^.Next := FTop;
  FTop := NewElement;

  Inc(FCount);
end;

function TStack<T>.Pop: T;
var
  P: PItem;
begin
  if FTop = nil then
    raise Exception.Create('Stack is empty');
  P := FTop;
  FTop := FTop^.Next;
  Result := P^.Data;
  Dispose(P);
  Dec(FCount);
end;

function TStack<T>.Peek: T;
begin
  if FTop = nil then
    raise Exception.Create('Stack is empty');
  Result := FTop^.Data;
end;

function TStack<T>.Count: Integer;
begin
  Result := FCount;
end;

end.

