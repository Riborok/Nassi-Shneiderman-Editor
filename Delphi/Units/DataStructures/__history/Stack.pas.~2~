unit Stack;

interface
uses System.SysUtils;

type
  TGenericStack<T> = class
  private
    type
      PStackItem = ^TStackItem;
      TStackItem = record
        Data: T;
        Next: PStackItem;
      end;
  private
    FTop: PStackItem;
    FCount: Integer;
  public
    constructor Create;
    destructor Destroy; override;
    procedure Push(const AItem: T);
    function Pop: T;
    function Peek: T;
    function Count: Integer;
  end;

implementation

{ TGenericStack<T> }

constructor TGenericStack<T>.Create;
begin
  inherited;
  FTop := nil;
  FCount := 0;
end;

destructor TGenericStack<T>.Destroy;
begin
  while FTop <> nil do
    Pop;
  inherited;
end;

procedure TGenericStack<T>.Push(const AItem: T);
var
  P: PStackItem;
begin
  New(P);
  P^.Data := AItem;
  P^.Next := FTop;
  FTop := P;
  Inc(FCount);
end;

function TGenericStack<T>.Pop: T;
var
  P: PStackItem;
begin
  if FTop = nil then
    raise Exception.Create('Stack is empty');
  P := FTop;
  FTop := FTop^.Next;
  Result := P^.Data;
  Dispose(P);
  Dec(FCount);
end;

function TGenericStack<T>.Peek: T;
begin
  if FTop = nil then
    raise Exception.Create('Stack is empty');
  Result := FTop^.Data;
end;

function TGenericStack<T>.Count: Integer;
begin
  Result := FCount;
end;

end.

