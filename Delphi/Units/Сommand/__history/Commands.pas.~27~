unit Commands;

interface
uses AdditionalTypes, Base, Stack, CaseBranching;
type

  TCommand = interface
    procedure Execute;
    procedure Undo;
  end;

  { TCommnadChangeContent }
  TCommnadChangeContent = class(TInterfacedObject, TCommand)
  private
    FAction: string;
    FConds: TStringArr;
    FStatement: TStatement;
  public
    constructor Create(const AStatement: TStatement; const AAct: String;
                       const AConds: TStringArr);
    procedure Execute;
    procedure Undo;
  End;

  { TCommandAddStatement }
  TCommandAddStatement = class(TInterfacedObject, TCommand)
  private
    FNewStatement: TStatement;
    FBaseBlock: TBlock;
    FIndex : Integer;
  public
    constructor Create(const ABaseBlock: TBlock; const AIndex : Integer;
                       const ANewStatement: TStatement);
    procedure Execute;
    procedure Undo;
    destructor Destroy; override;
  End;

  { TCommandDel }
  TCommandDelStatement = class(TInterfacedObject, TCommand)
  private
    FStatement: TStatement;
    FIndex : Integer;
  public
    constructor Create(const AStatement: TStatement);
    procedure Execute;
    procedure Undo;
  End;

  { TCommandAddBlock }
  TCommandAddBlock = class(TInterfacedObject, TCommand)
  private
    FInsertedBlock, FBaseBlock: TBlock;
    FIndex: Integer;
  public
    constructor Create(const ABaseBlock: TBlock; const AIndex : Integer;
                       const AInsertedBlock: TBlock);
    procedure Execute;
    procedure Undo;
    destructor Destroy; override;
  End;

  { TCommandCaseSort }
  {TCommandCaseSort = class(TInterfacedObject, TCommand)
  private
    FCaseBranching : TCaseBranching;
  public
    constructor Create(const ABaseBlock: TBlock; const AIndex : Integer;
                       const AInsertedBlock: TBlock);
    procedure Execute;
    procedure Undo;
  End;}

implementation

  { TChangeContent }
  constructor TCommnadChangeContent.Create(const AStatement: TStatement; const AAct: String;
                       const AConds: TStringArr);
  begin
    FAction:= AAct;
    FConds:= AConds;
    FStatement:= AStatement;
  end;

  procedure TCommnadChangeContent.Execute;
  var
    PrevAction: string;
  begin
    PrevAction:= FStatement.Action;
    if FConds = nil then
      FStatement.ChangeAction(FAction)
    else
    begin
      var CaseBranching: TCaseBranching:= TCaseBranching(FStatement);
      var FPrevConds: TStringArr := CaseBranching.Conds;
      CaseBranching.ChangeActionWithConds(FAction, FConds);
      FConds:= FPrevConds;
    end;
    FAction:= PrevAction;
  end;

  procedure TCommnadChangeContent.Undo;
  begin
    Execute;
  end;

  { TCommandAdd }
  destructor TCommandAddStatement.Destroy;
  begin
    FNewStatement.Destroy;
    inherited;
  end;

  constructor TCommandAddStatement.Create(const ABaseBlock: TBlock; const AIndex : Integer;
                       const ANewStatement: TStatement);
  begin
    FNewStatement:= ANewStatement;
    FIndex:= AIndex;
    FBaseBlock:= ABaseBlock;
  end;

  procedure TCommandAddStatement.Execute;
  begin
    FBaseBlock.AddStatement(FIndex, FNewStatement);
  end;

  procedure TCommandAddStatement.Undo;
  begin
    FIndex:= FBaseBlock.ExtractWithResizing(FNewStatement) + 1;
  end;

  { TCommandDel }
  constructor TCommandDelStatement.Create(const AStatement: TStatement);
  begin
    FStatement:= AStatement;
  end;

  procedure TCommandDelStatement.Execute;
  begin
    FIndex:= FStatement.BaseBlock.ExtractWithResizing(FStatement) + 1;
  end;

  procedure TCommandDelStatement.Undo;
  begin
    FStatement.BaseBlock.AddStatement(FIndex, FStatement);
  end;

  { TCommandAddBlock }
  destructor TCommandAddBlock.Destroy;
  begin
    FInsertedBlock.Destroy;
    inherited;
  end;

  constructor TCommandAddBlock.Create(const ABaseBlock: TBlock; const AIndex : Integer;
                     const AInsertedBlock: TBlock);
  begin
    FBaseBlock:= ABaseBlock;
    FIndex:= AIndex + 1;
    FInsertedBlock:= AInsertedBlock;
  end;

  procedure TCommandAddBlock.Execute;
  begin
    FBaseBlock.AddBlock(FIndex, FInsertedBlock);
  end;

  procedure TCommandAddBlock.Undo;
  var
    Offset, I, J: Integer;
    Blocks: TBlockArr;
  begin
    Offset:= FInsertedBlock.XStart - FBaseBlock.XStart;
    for I := 0 to FInsertedBlock.Statements.Count - 1 do
      if FBaseBlock.ExtractStatementAt(FIndex + I) is TOperator then
      begin
        Blocks:= TOperator(FInsertedBlock.Statements[I]).Blocks;
        for J := 0 to High(Blocks) do
          Blocks[J].MoveRight(Offset);
        Blocks[High(Blocks)].ChangeXLastBlock(FBaseBlock.XLast);
      end;

    FBaseBlock.Install(FIndex);
  end;

  { TCommandCaseSort }

end.
