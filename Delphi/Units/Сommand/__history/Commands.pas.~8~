unit Commands;

interface
uses AdditionalTypes, Base, Stack, CaseBranching;
type

  TCommand = interface
    procedure Execute;
    procedure Undo;
  end;

  { TCommnadChangeContent }
  TCommnadChangeContent = class(TInterfacedObject, TCommand)
  private
    FAction: string;
    FConds: TStringArr;
    FStatement: TStatement;
  public
    constructor Create(const AStatement: TStatement; const AAct: String;
                       const AConds: TStringArr);
    procedure Execute;
    procedure Undo;
  End;

  { TCommandCreate }
  TCommandAdd = class(TInterfacedObject, TCommand)
  private
    FNewStatement: TStatement;
    FBlocks: TBlockArr;
    FBlock: TBlock;
    FIndex : Integer;
  public
    constructor Create(const ABlock: TBlock; const AIndex : Integer;
                       const ANewStatement: TStatement);
    procedure Execute;
    procedure Undo;
    destructor Destroy; override;
  End;

implementation

  { TChangeContent }
  constructor TCommnadChangeContent.Create(const AStatement: TStatement; const AAct: String;
                       const AConds: TStringArr);
  var
    CaseBranching: TCaseBranching;
  begin
    FAction:= AAct;
    FConds:= AConds;
    FStatement:= AStatement;
  end;

  procedure TCommnadChangeContent.Execute;
  var
    PrevAction: string;
  begin
    PrevAction:= FStatement.Action;
    if FConds = nil then
      FStatement.ChangeAction(FAction)
    else
    begin
      var CaseBranching: TCaseBranching:= TCaseBranching(FStatement);
      var FPrevConds: TStringArr := CaseBranching.Conds;
      CaseBranching.ChangeActionWithConds(FAction, FConds);
      FConds:= FPrevConds;
    end;
    FAction:= PrevAction;
  end;

  procedure TCommnadChangeContent.Undo;
  begin
    Execute;
  end;

  { TCommandCreate }
  constructor TCommandAdd.Create(const ABlock: TBlock; const AIndex : Integer;
                       const ANewStatement: TStatement);
  begin
    FNewStatement:= ANewStatement;
    FIndex:= AIndex;
    FBlock:= ABlock;
    if FNewStatement is TOperator then
      FBlocks := TOperator(FNewStatement).Blocks
    else
      FBlocks := nil;
  end;

  procedure TCommandAdd.Execute;
  begin
    if FBlocks <> nil then
      FBlocks[High(FBlocks)].ChangeXLastBlock(FBlock.XLast);
    FBlock.AddStatement(FIndex, FNewStatement);
  end;

  procedure TCommandAdd.Undo;
  begin
    FIndex:= FBlock.ExtractWithResizing(FNewStatement);
  end;

  destructor TCommandAdd.Destroy;
  begin
    FNewStatement.Destroy;
    inherited;
  end;

end.
